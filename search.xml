<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2.4正则表达式</title>
      <link href="/2020/06/24/2-4-zheng-ze-biao-da-shi/"/>
      <url>/2020/06/24/2-4-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>正则表达式</p></blockquote><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="1-初识SQL注入"><a href="#1-初识SQL注入" class="headerlink" title="1.初识SQL注入"></a>1.初识SQL注入</h2><p>SQL注入，就是针对SQL语句的注入，也可以理解为用户输入的数据当做SQL语句的代码执行了</p><p>这里有两个关键条件：</p><ol><li><p>用户能够控制输入</p></li><li><p>原本程序要执行的代码，拼接了用户输入的数据然后进行执行</p></li></ol><p>那么一般防护sql注入，使用的是正则表达式</p><h2 id="2-什么是正则表达式"><a href="#2-什么是正则表达式" class="headerlink" title="2.什么是正则表达式"></a>2.什么是正则表达式</h2><h3 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h3><p>正则表达式又称规则表达式，在代码中常简写为regex、regexp或RE，正则表达式通常被用来检索、替换那些符合某个模式的文本。（总的来说，通过一个特别的语言，来挑选符合条件的数据或文本）</p><h3 id="2-2特点"><a href="#2-2特点" class="headerlink" title="2.2特点"></a>2.2特点</h3><p>正则表达式的特点是：</p><ol><li><p>灵活性、逻辑性和功能性非常强；</p></li><li><p>可以迅速地用极简单的方式达到字符串的复杂控制。</p></li><li><p>对于刚接触的人来说，比较晦涩难懂。</p></li></ol><h3 id="2-3用途"><a href="#2-3用途" class="headerlink" title="2.3用途"></a>2.3用途</h3><p>正则表达式用途：</p><ul><li><p>判断字符串是否符合某一规则（判断是否符合手机号、邮箱规则）。</p></li><li><p>从一个字符串中找出符合规则的所有子字符串（取HTML标签名）。</p></li></ul><h2 id="3-PHP中正则表达式常用函数"><a href="#3-PHP中正则表达式常用函数" class="headerlink" title="3.PHP中正则表达式常用函数"></a>3.PHP中正则表达式常用函数</h2><p><strong>PHP</strong>中使用正则规则一定要加代表正则的标识<strong>/  /</strong> </p><h3 id="3-1preg-match-all"><a href="#3-1preg-match-all" class="headerlink" title="3.1preg_match_all"></a>3.1preg_match_all</h3><p>preg_match_all(正则表达式、匹配字符串、匹配到的东西放入数组)</p><p>用来返回匹配到的次数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/要匹配字符串/'</span><span class="token punctuation">,</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/a/'</span><span class="token punctuation">,</span><span class="token string">'asdasdasdasdasdasdadas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*要查找字符串    字符串*/</span>  <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*返回结果：8*/</span></code></pre><h3 id="3-2preg-replace"><a href="#3-2preg-replace" class="headerlink" title="3.2preg_replace"></a>3.2preg_replace</h3><p>preg_replace (正则表达式、替换成什么、匹配字符串) </p><p>返回替换后的结果</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/匹配字符/'</span><span class="token punctuation">,</span><span class="token string">'要替换成的字符'</span><span class="token punctuation">,</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/abcd/'</span><span class="token punctuation">,</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token string">'abcdefg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：Helloefg*/</span></code></pre><h2 id="4-正则表达式语法"><a href="#4-正则表达式语法" class="headerlink" title="4.正则表达式语法"></a>4.正则表达式语法</h2><h3 id="4-1常用转义字符"><a href="#4-1常用转义字符" class="headerlink" title="4.1常用转义字符"></a>4.1常用转义字符</h3><p>常用转义字符：</p><ul><li>数字：\d</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\d/'</span><span class="token punctuation">,</span><span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配数字*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(10)*/</span></code></pre><ul><li><p>非数字：\D</p></li><li><p>空白字符（空格、制表符、换页符等）：\s</p></li><li><p>非空白字符：\S</p></li><li><p>单词字符（26个英文字母+数字+下划线_）：\w</p></li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/\w/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配单词*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(4)*/</span></code></pre><ul><li>非单词字符：\W</li></ul><h3 id="4-2自定义字符"><a href="#4-2自定义字符" class="headerlink" title="4.2自定义字符"></a>4.2自定义字符</h3><p>自定义字符结合</p><p>字符集合：[单个字符或字符区间]，用于匹配集合内字符</p><p>  如：</p><ul><li>[a-z]表示a-z这26个小写字母</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-y]/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配a~y间的小写字符*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配b*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><ul><li>[0-9a-z]表示0-9这10个数字和a-z26个小写字母</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-y1-8]/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配a~y间的小写字符和1-8间的数字*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配b3*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><ul><li>[135a-h]表示包含数字1，3，5和字母a-h这8个字母</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-y135]/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配a~y间的小写字符和1 3 5三个数字*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配b 3*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><ul><li>注意：两个不同字符段间请勿使用,隔开。</li></ul><p>非集：<code>[^单个字符或字符区间]</code>，用于匹配非集合内字符。</p><p>  如：</p><ul><li>[^0-9]表示匹配所有非数字字符。</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[^135]/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配除1 3 5之外的字符*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(3)     /*匹配A B _*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><ul><li>[^a-zA-Z]表示匹配所以非字母字符。</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[^A-Za-z]/'</span><span class="token punctuation">,</span><span class="token string">'Ab3_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*匹配除字母之外的字符*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配3 _*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><h3 id="4-3关键字"><a href="#4-3关键字" class="headerlink" title="4.3关键字"></a>4.3关键字</h3><p><code>()</code>   =&gt; 和数学一样很像，代表这是一个整体。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[(30)]/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配的是( 3 0 )*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配3 0*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><p><code>^</code>    =&gt;  匹配输入字符串的开始位置</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/^A/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配开头的第一个字符串*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配1个*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><p><code>$</code>    =&gt; 匹配输入字符串的结尾位置</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/_$/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配结尾的字符串*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配1个*/</span><span class="token operator">*</span><span class="token operator">/</span>    </code></pre><p><code>.</code>    =&gt; 通配符<code>[代表任意字符][不匹配换行]</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/./'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要通配*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(5)     /*匹配A b 3 0 _   全部都能匹配*/</span><span class="token operator">*</span><span class="token operator">/</span> </code></pre><p><code>*</code>    =&gt; 匹配0次或者多次</p><p><code>.*</code>一般作为通配符</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/.*/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*代表此时.匹配了0次或者匹配多次*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配0次 多次*/</span><span class="token operator">*</span><span class="token operator">/</span> </code></pre><p><code>+</code>    =&gt; 匹配1次或者多次</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/.+/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*整体匹配*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配 多次 */</span><span class="token operator">*</span><span class="token operator">/</span> </code></pre><p><code>\</code>    =&gt; 转义字符</p><p>用来转义一些有歧义的字符</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/b\$/'</span><span class="token punctuation">,</span><span class="token string">'Ab$30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时匹配b$字符，而不是以b结尾*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配 b$ */</span><span class="token operator">*</span><span class="token operator">/</span> </code></pre><p><code>|</code>     =&gt;  两项之间的一个选择。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*字符集，选择，整体的使用*/</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-y]|(30)/'</span><span class="token punctuation">,</span><span class="token string">'Ab30_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配的是a~y间字母和30*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配b 30*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><h3 id="4-4限定符-修饰符"><a href="#4-4限定符-修饰符" class="headerlink" title="4.4限定符 + 修饰符"></a>4.4<strong>限定符</strong> <strong>+</strong> 修饰符</h3><p>限定符：</p><p><code>{n}</code>   =&gt; 例如: 0{8}   意思是指 只有连起来8个0才会被匹配  </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*字符集，选择，整体的使用*/</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/1{2}/'</span><span class="token punctuation">,</span><span class="token string">'1111111111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配的{n}个1 */</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(5)     /*匹配11 11 11 11 11*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><p><code>{n,}</code>  =&gt;例如： 0{2,}  意思是 只要有2个0及其以上的就会被匹配</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*字符集，选择，整体的使用*/</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/1{2,}/'</span><span class="token punctuation">,</span><span class="token string">'1111111111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配的{n}个1 */</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配1111111111*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><p> <code>{n,m}</code> =&gt; 例如： 0{2,4} 意思是最少匹配2个0，最多匹配4个0</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*字符集，选择，整体的使用*/</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/1{2,5}/'</span><span class="token punctuation">,</span><span class="token string">'11111111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配最少匹配2个0，最多匹配5个0 */</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(2)     /*匹配11111 111 */</span>     <span class="token comment" spellcheck="true">/*此时默认从5个1开始匹配，然后下降*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><p> 注：被匹配时，默认匹配最多的次数</p><p> 修饰符：</p><p><code>/i</code> =&gt; 不区分大小写</p><p> <code>/A</code>  =&gt; 匹配规则必须从头开始匹配</p><p> <code>/s</code>   =&gt; .将匹配一切字符</p><p> <code>/x</code>   =&gt; 正则表达式中的空白字符会被忽略</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*字符集，选择，整体的使用*/</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/C/iA'</span><span class="token punctuation">,</span><span class="token string">'cAb3_.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*此时要匹配的以不区分C大小写开头*/</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：int(1)     /*匹配c*/</span><span class="token operator">*</span><span class="token operator">/</span></code></pre><h2 id="5-操作"><a href="#5-操作" class="headerlink" title="5.操作"></a>5.操作</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*例题*/</span><span class="token delimiter">&lt;?php</span>  <span class="token variable">$key</span><span class="token operator">=</span><span class="token string">'flag{********************************}'</span><span class="token punctuation">;</span> <span class="token variable">$Regular</span><span class="token operator">=</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/zkaq.*key.{2,9}:\/.*\/(key*key)/i"</span><span class="token punctuation">,</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$Regular</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'key: '</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre><h3 id="1-首先是进行代码分析"><a href="#1-首先是进行代码分析" class="headerlink" title="1.首先是进行代码分析"></a>1.首先是进行代码分析</h3><pre class=" language-php"><code class="language-php"><span class="token number">1</span> <span class="token string">'flag{********************************}'</span>  <span class="token comment" spellcheck="true">/*在这里就是我们需要获得的flag*/</span><span class="token number">2</span> <span class="token variable">$key</span> <span class="token variable">$Regular</span>   <span class="token comment" spellcheck="true">/*此时就是被赋值的变量*/</span>  <span class="token comment" spellcheck="true">/*preg_match函数用于执行正则表达式的匹配*/</span><span class="token number">3</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/zkaq.*key.{2,9}:\/.*\/(key*key)/i"</span><span class="token punctuation">,</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token operator">/</span>zkaq<span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token operator">/</span>i     <span class="token comment" spellcheck="true">/*正则表达式*/</span><span class="token number">5</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">/*移除字符串两侧的空白字符和其它预定义字符*/</span><span class="token number">6</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">/*获取传入的id值*/</span><span class="token number">7</span> <span class="token variable">$match</span>           <span class="token comment" spellcheck="true">/*如果提供了参数match，它将被填充为搜索结果*/</span><span class="token number">8</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">/*函数输出一条消息，并退出当前脚本。*/</span></code></pre><h3 id="2-提要"><a href="#2-提要" class="headerlink" title="2.提要"></a>2.提要</h3><p>经过分析发现当输入的id值满足正则表达式时，即可获得key,也就是flag</p><p>所以接下来就是对正则表达式的分析</p><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3.实现"></a>3.实现</h3><pre class=" language-php"><code class="language-php"><span class="token operator">/</span>zkaq<span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token operator">/</span>i     <span class="token comment" spellcheck="true">/*正则表达式*/</span></code></pre><ol><li>先看正则式的最外层，/i 表示不区分大小写</li></ol><pre class=" language-php"><code class="language-php">zkaq<span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="2"><li>依次从左往右看，zkaq没有任何功能，所以应该是字符串，则：zkaq</li></ol><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token operator">*</span>key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="3"><li>.*代表任意字符0个或多个，则此时字符串可以随意写或者不写，那就123吧，则：zkaq123</li></ol><pre class=" language-php"><code class="language-php">key<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="4"><li>key为字符串，则：zkaq123key</li></ol><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="5"><li>.{2,9}代表任意字符匹配2~9个，那就12（1一次 2一次，总共2次），则：zkaq123key12</li></ol><pre class=" language-php"><code class="language-php"><span class="token punctuation">:</span>\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="6"><li>:没有任何功能，此时为字符串，则：zkaq123key12:</li></ol><pre class=" language-php"><code class="language-php">\<span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="7"><li>\为转义字符，此时转义/，则：zkaq123key12:/</li></ol><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="8"><li>.*代表任意字符0次或者多次，那就0次吧，不写任何字符，则：zkaq123key12:/</li></ol><pre class=" language-php"><code class="language-php">\<span class="token operator">/</span><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="9"><li>\转义字符，转义/，则：zkaq123key12://</li></ol><pre class=" language-php"><code class="language-php"><span class="token punctuation">(</span>key<span class="token operator">*</span>key<span class="token punctuation">)</span></code></pre><ol start="10"><li>()代表整体，可以去除，则：zkaq123key12://</li></ol><pre class=" language-php"><code class="language-php">key<span class="token operator">*</span>key</code></pre><ol start="11"><li>key为字符串，则：zkaq123key12://key</li></ol><pre class=" language-php"><code class="language-php"><span class="token operator">*</span>key</code></pre><ol start="12"><li>*为匹配前面的( y )零次或多次，那这里匹配一次吧，则：zkaq123key12://keyy</li></ol><pre class=" language-php"><code class="language-php">key</code></pre><ol start="13"><li>key为字符串，则：zkaq123key12://keyykey</li></ol><p>则此时符合正则表达式的字符串为：zkaq123key12://keyykey</p><h3 id="4-提交"><a href="#4-提交" class="headerlink" title="4.提交"></a>4.提交</h3><ol><li><p>修改url中id值为：zkaq123key12://keyykey，即：id=zkaq123key12://keyykey</p></li><li><p>输入到url,然后跳转</p></li><li><p>得到flag</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1593014326/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1_vus7cs.png" alt="flag"></p><ol start="4"><li>最后提交flag: flag{regular_god_code}</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3后端基础PHP（二）</title>
      <link href="/2020/06/21/2-3-hou-duan-ji-chu-php-er/"/>
      <url>/2020/06/21/2-3-hou-duan-ji-chu-php-er/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>PHP学习</p></blockquote><h1 id="后端基础PHP"><a href="#后端基础PHP" class="headerlink" title="后端基础PHP"></a>后端基础PHP</h1><h2 id="1-循环语句书写"><a href="#1-循环语句书写" class="headerlink" title="1.循环语句书写"></a>1.循环语句书写</h2><p>在 PHP 中，提供了下列循环语句：</p><ul><li><p><strong>while</strong> - 只要指定的条件成立，则循环执行代码块</p></li><li><p><strong>do…while</strong> - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</p></li><li><p><strong>for</strong> - 循环执行代码块指定的次数</p></li><li><p><strong>foreach</strong> - 根据数组中每个元素来循环代码块</p></li></ul><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a>1.while循环</h3><p>while 循环将重复执行代码块，直到指定的条件不成立。</p><p>如果满足则执行，不满足则不执行</p><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//要执行的代码   </span><span class="token punctuation">}</span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果>10,则输出并且减1</span>        <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">--</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：2120191817161514131211*/</span></code></pre><hr><h3 id="2-do…while语句"><a href="#2-do…while语句" class="headerlink" title="2.do…while语句"></a>2.do…while语句</h3><p>do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环。</p><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要执行的代码</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span></code></pre><p>操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">D_W</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'学生成绩为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'分，不及格，继续努力！！！'</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token markup">&lt;70 and $a></span><span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'学生成绩为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'分，C级，继续努力！！！'</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token markup">&lt;80 and $a></span><span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'学生成绩为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'分，B级，继续努力！！！'</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'学生成绩为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'分，A级，继续努力！！！'</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'学生成绩为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'分，S级，特此表扬！！！'</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">echo</span> <span class="token string">'输入有错，请输入正确的分数'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token variable">$a</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token function">D_W</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：学生成绩为：89分，A级，继续努力！！！学生成绩为：90分，A级，继续努力！！！学生成绩为：91分，A级，继续努力！！！学生成绩为：92分，A级，继续努力！！！学生成绩为：93分，A级，继续努力！！！学生成绩为：94分，A级，继续努力！！！学生成绩为：95分，A级，继续努力！！！学生成绩为：96分，A级，继续努力！！！学生成绩为：97分，A级，继续努力！！！学生成绩为：98分，A级，继续努力！！！学生成绩为：99分，A级，继续努力！！！学生成绩为：100分，S级，特此表扬！！！*/</span></code></pre><hr><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a>3.for循环</h3><p>for 循环用于您预先知道脚本需要运行的次数的情况。</p><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始值<span class="token punctuation">;</span> 条件<span class="token punctuation">;</span> 增量<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要执行的代码;</span><span class="token punctuation">}</span></code></pre><p>参数：</p><ul><li><strong>初始值</strong>：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。</li><li><strong>条件</strong>：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。</li><li><strong>增量</strong>：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。</li></ul><p><strong>注释：</strong>上面的<strong>初始值</strong>和<strong>增量</strong>参数可为空，或者有多个表达式（用逗号分隔）。</p><p><strong>操作</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">F_</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'努力学习中~，请勿打扰！'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'当前分数为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'!!!'</span><span class="token punctuation">.</span><span class="token string">'努力提升学习，分数+1'</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'当前分数为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'，还需努力，切勿骄傲自大！！！！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">F_</span><span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：努力学习中~，请勿打扰！当前分数为：53!!!努力提升学习，分数+1当前分数为：54!!!努力提升学习，分数+1当前分数为：55!!!努力提升学习，分数+1当前分数为：56!!!努力提升学习，分数+1当前分数为：57!!!努力提升学习，分数+1当前分数为：58!!!努力提升学习，分数+1当前分数为：59!!!努力提升学习，分数+1*/</span></code></pre><hr><h3 id="4-foreach循环"><a href="#4-foreach循环" class="headerlink" title="4.foreach循环"></a>4.foreach循环</h3><ul><li>foreach 循环用于遍历数组。</li></ul><p>语法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要执行的代码块</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。</span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//当遇到编码问题时</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">F_A</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'普通QQ用户'</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'->'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span> <span class="token function">F_A</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'vip'</span><span class="token punctuation">,</span><span class="token string">'svip'</span><span class="token punctuation">,</span><span class="token string">'bigvip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：普通QQ用户->vip->svip->bigvip*/</span></code></pre><h3 id="5-continue和break"><a href="#5-continue和break" class="headerlink" title="5.continue和break"></a>5.continue和break</h3><ul><li>continue命令会终止循环体的单次循环，代码继续往下执行</li><li>break跳出循环</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">C_B</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'努力学习中~，请勿打扰！'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//跳出当前循环，继续往下执行</span>        <span class="token comment" spellcheck="true">//break;                  //直接跳出循环体</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'当前分数为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'!!!'</span><span class="token punctuation">.</span><span class="token string">'努力提升学习，分数+1'</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">'当前分数为：'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'，还需努力，切勿骄傲自大！！！！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">C_B</span><span class="token punctuation">(</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果1：    continue  努力学习中~，请勿打扰！努力学习中~，请勿打扰！努力学习中~，请勿打扰！努力学习中~，请勿打扰！努力学习中~，请勿打扰！努力学习中~，请勿打扰！*/</span><span class="token comment" spellcheck="true">/*输出结果2：    break努力学习中~，请勿打扰！当前分数为：53，还需努力，切勿骄傲自大！！！！*/</span></code></pre><h2 id="2-PHP魔术常量"><a href="#2-PHP魔术常量" class="headerlink" title="2.PHP魔术常量"></a>2.PHP魔术常量</h2><h3 id="1-LINE-line"><a href="#1-LINE-line" class="headerlink" title="1.__LINE__/__line__"></a>1.<code>__LINE__</code>/<code>__line__</code></h3><p>文件中的当前行号。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">'当前行号为：第'</span><span class="token punctuation">.</span>__line__<span class="token punctuation">.</span><span class="token string">'行'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'当前行号为：第'</span><span class="token punctuation">.</span>__line__<span class="token punctuation">.</span><span class="token string">'行'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'当前行号为：第'</span><span class="token punctuation">.</span>__line__<span class="token punctuation">.</span><span class="token string">'行'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'当前行号为：第'</span><span class="token punctuation">.</span>__line__<span class="token punctuation">.</span><span class="token string">'行'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">'当前行号为：第'</span><span class="token punctuation">.</span>__line__<span class="token punctuation">.</span><span class="token string">'行'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：当前行号为：第2行当前行号为：第3行当前行号为：第4行当前行号为：第5行当前行号为：第6行*/</span></code></pre><h3 id="2-file-FILE"><a href="#2-file-FILE" class="headerlink" title="2.__file__/__FILE__"></a>2.<code>__file__</code>/<code>__FILE__</code></h3><p>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。（包括文件）</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">'当前文件目录为：'</span><span class="token punctuation">.</span>__file__<span class="token punctuation">.</span><span class="token string">'.'</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：当前文件目录为：C:\phpStudy\PHPTutorial\WWW\index.php.*/</span></code></pre><h3 id="3-DIR-dir"><a href="#3-DIR-dir" class="headerlink" title="3.__DIR__/__dir__"></a>3.<code>__DIR__</code>/<code>__dir__</code></h3><p>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。(不包括文件)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">'当前文件目录为：'</span><span class="token punctuation">.</span>__dir__<span class="token punctuation">.</span><span class="token string">'.'</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：当前文件目录为：C:\phpStudy\PHPTutorial\WWW.*/</span></code></pre><hr><h2 id="3-PHP命名空间"><a href="#3-PHP命名空间" class="headerlink" title="3.PHP命名空间"></a>3.PHP命名空间</h2><p>PHP 命名空间可以解决以下两类问题：</p><ol><li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li><li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li></ol><p>默认情况下，所有常量、类和函数名都放在全局空间下，就和PHP支持命名空间之前一样。</p><p>命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。语法格式如下；</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 定义代码在 'MyProject' 命名空间中  </span><span class="token keyword">namespace</span> <span class="token package">MyProject</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ... 代码 ...  </span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h2 id="4-PHP面向对象"><a href="#4-PHP面向对象" class="headerlink" title="4.PHP面向对象"></a>4.PHP面向对象</h2><p>在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。</p><p>在现实世界里我们所面对的事情都是对象，如计算机、电视机、自行车等。</p><p><strong>对象的主要三个特性：</strong></p><ul><li>对象的行为：可以对 对象施加那些操作，开灯，关灯就是行为。</li><li>对象的形态：当施加那些方法是对象如何响应，颜色，尺寸，外型。</li><li>对象的表示：对象的表示就相当于身份证，具体区分在相同的行为与状态下有什么不同。</li></ul><h3 id="4-1面向对象内容"><a href="#4-1面向对象内容" class="headerlink" title="4.1面向对象内容"></a>4.1面向对象内容</h3><ul><li><strong>类</strong> − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li><li><strong>对象</strong> − 是类的实例。</li><li><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</li><li><strong>成员函数</strong> − 定义在类的内部，可用于访问对象的数据。</li><li><strong>继承</strong> − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</li><li><strong>父类</strong> − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</li><li><strong>子类</strong> − 一个类继承其他类称为子类，也可称为派生类。</li><li><strong>多态</strong> − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</li><li><strong>重载</strong> − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</li><li><strong>抽象性</strong> − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</li><li><strong>封装</strong> − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</li><li><strong>构造函数</strong> − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</li><li><strong>析构函数</strong> − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</li></ul><hr><h3 id="4-2类定义"><a href="#4-2类定义" class="headerlink" title="4.2类定义"></a>4.2类定义</h3><p>类的基本定义：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">p_c</span><span class="token punctuation">{</span>                       <span class="token comment" spellcheck="true">//类名此时为：p_C</span>    <span class="token keyword">var</span> <span class="token variable">$a</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//变量声明</span>    <span class="token keyword">var</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token string">'Hello,world!!!!'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//变量初始化</span>    <span class="token keyword">function</span> <span class="token function">p_c</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义函数</span>        <span class="token comment" spellcheck="true">//执行代码</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//代码</span><span class="token punctuation">}</span>   <span class="token delimiter">?></span></code></pre><ul><li>类使用 <strong>class</strong> 关键字后加上类名定义。</li><li>类名后的一对大括号({})内可以定义变量和方法。</li><li>类的变量使用 <strong>var</strong> 来声明, 变量也可以初始化值。</li><li>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</li></ul><hr><h3 id="4-3类对象创建"><a href="#4-3类对象创建" class="headerlink" title="4.3类对象创建"></a>4.3类对象创建</h3><p>类创建后，我们可以使用 <strong>new</strong> 运算符来实例化该类的对象：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$p_a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">p_c</span><span class="token punctuation">;</span><span class="token variable">$p_b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">p_c</span><span class="token punctuation">;</span></code></pre><p>实例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">P_Cla</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定义变量*/</span>    <span class="token keyword">var</span> <span class="token variable">$stu_id</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$stu_name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*定义成员函数*/</span>    <span class="token keyword">function</span> <span class="token function">setid</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token operator">=</span><span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setname</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*创建类对象*/</span>    <span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_Cla</span><span class="token punctuation">;</span><span class="token variable">$lisi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_Cla</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*调用成员函数，设置id与name*/</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setid</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setname</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setid</span><span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setname</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*调用成员函数，获取id与name*/</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：001张三002李四*/</span></code></pre><h3 id="4-4构造函数"><a href="#4-4构造函数" class="headerlink" title="4.4构造函数"></a>4.4构造函数</h3><p>构造函数是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，在创建对象的语句中与 <strong>new</strong> 运算符一起使用。</p><p>语法：</p><pre class=" language-php"><code class="language-php">void <span class="token function">__construct</span> <span class="token punctuation">(</span><span class="token punctuation">[</span> mixed <span class="token variable">$args</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>操</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*上例可更改为*/</span><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">P_C</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*定义变量*/</span>    <span class="token keyword">var</span> <span class="token variable">$stu_id</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$stu_name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*构造函数*/</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*定义成员函数*/</span>    <span class="token keyword">function</span> <span class="token function">setid</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token operator">=</span><span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setname</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*创建类对象*/</span>    <span class="token variable">$zhangsan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_C</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//省去调用set</span><span class="token variable">$lisi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_C</span><span class="token punctuation">(</span><span class="token string">'002'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*调用成员函数，获取id与name*/</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zhangsan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lisi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：001张三002李四*/</span></code></pre><h3 id="4-5析构函数"><a href="#4-5析构函数" class="headerlink" title="4.5析构函数"></a>4.5析构函数</h3><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。</p><p>语法：</p><pre class=" language-php"><code class="language-php">void <span class="token function">__destruct</span> <span class="token punctuation">(</span> void <span class="token punctuation">)</span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">P_X</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'构造函数'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">'P_Xclass'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'销毁函数：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：构造函数销毁函数：P_Xclass*/</span></code></pre><h3 id="4-6继承"><a href="#4-6继承" class="headerlink" title="4.6继承"></a>4.6继承</h3><p><strong>继承</strong>：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。(总的来说就是在前一个类的基础上再扩展功能)</p><p>PHP 使用关键字 <strong>extends</strong> 来继承一个类，PHP 不支持多继承，格式如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">chlid</span> <span class="token keyword">extends</span> <span class="token class-name">parent</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码</span><span class="token punctuation">}</span>    <span class="token delimiter">?></span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">P_C</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">P_C2</span> <span class="token keyword">extends</span> <span class="token class-name">P_C</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$stu_class</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setclass</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_class</span> <span class="token operator">=</span> <span class="token variable">$class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'所在班级为：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_class</span><span class="token punctuation">.</span><span class="token string">'。&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$wangwu</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P_C2</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$wangwu</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setclass</span><span class="token punctuation">(</span><span class="token string">'一班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$wangwu</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$wangwu</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$wangwu</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：1王五一班*/</span></code></pre><hr><h3 id="4-7方法重写"><a href="#4-7方法重写" class="headerlink" title="4.7方法重写"></a>4.7方法重写</h3><p>当继承父类时，对于父类的方法不满意，即对其重写（功能名不变）</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">P_C</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">P_C2</span> <span class="token keyword">extends</span> <span class="token class-name">P_C</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment" spellcheck="true">/*省略*/</span>    <span class="token comment" spellcheck="true">/*对于P_C类中的getid与getname重写*/</span>    <span class="token keyword">function</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出</span>        <span class="token keyword">echo</span> <span class="token string">'ID为：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token punctuation">.</span><span class="token string">','</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'名字叫做：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token punctuation">.</span><span class="token string">','</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>       <span class="token delimiter">?></span><span class="token operator">/</span><span class="token operator">*</span>输出结果：<span class="token constant">ID</span>为：<span class="token number">1</span><span class="token punctuation">,</span>名字叫做<span class="token punctuation">:</span> 王五<span class="token punctuation">,</span>所在班级为：一班<span class="token punctuation">.</span></code></pre><hr><h3 id="4-8访问控制"><a href="#4-8访问控制" class="headerlink" title="4.8访问控制"></a>4.8访问控制</h3><p>PHP 对属性或方法的访问控制，是通过在前面添加关键字 public（公有），protected（受保护）或 private（私有）来实现的。</p><ul><li><strong>public（公有）：</strong>公有的类成员可以在任何地方被访问。</li><li><strong>protected（受保护）：</strong>受保护的类成员则可以被其自身以及其子类和父类访问。</li><li><strong>private（私有）：</strong>私有的类成员则只能被其定义所在的类访问。</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*class1*/</span><span class="token keyword">class</span> <span class="token class-name">Myclass1</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string">'Hello'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//公有</span>    <span class="token keyword">protected</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//受保护，只可以被自身及其子类与父类访问</span>    <span class="token keyword">private</span> <span class="token variable">$c</span><span class="token operator">=</span><span class="token string">'world!!!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只可以被自身访问</span>    <span class="token keyword">function</span> <span class="token function">M_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token variable">$test1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass1</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$test1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Hello</span><span class="token keyword">echo</span> <span class="token variable">$test1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Cannot access protected property Myclass1::$b</span><span class="token keyword">echo</span> <span class="token variable">$test1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Cannot access private property Myclass1::$c</span><span class="token variable">$test1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">M_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果：Hello,world!!!</span><span class="token comment" spellcheck="true">/*class1*/</span><span class="token keyword">class</span> <span class="token class-name">Myclass2</span> <span class="token keyword">extends</span> <span class="token class-name">Myclass1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//继承Myclass1</span>    <span class="token comment" spellcheck="true">//私有(private)类成员无法被重写,共有和受保护的可以被重写</span>    <span class="token keyword">protected</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">',welcome to php '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token variable">$test2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$test2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Hello</span><span class="token keyword">echo</span> <span class="token variable">$test2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Cannot access protected property Myclass2::$b</span><span class="token keyword">echo</span> <span class="token variable">$test2</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Undefined property: Myclass2::$c  显示未定义</span><span class="token variable">$test2</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">M_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果：Hello,welcome to php world!!!</span><span class="token delimiter">?></span></code></pre><hr><h3 id="4-9方法的控制访问"><a href="#4-9方法的控制访问" class="headerlink" title="4.9方法的控制访问"></a>4.9方法的控制访问</h3><p>与上述访问控制类似，只是此时作用到方法上。</p><p>类中的方法可以被定义为公有，私有或受保护。如果没有设置这些关键字，则该方法默认为公有。</p><h3 id="4-10接口"><a href="#4-10接口" class="headerlink" title="4.10接口"></a>4.10接口</h3><ul><li><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p></li><li><p>接口是通过 <strong>interface</strong> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p></li></ul><p>接口中定义的所有方法都必须是公有，这是接口的特性。</p><ul><li>要实现一个接口，使用 <strong>implements</strong> 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</li></ul><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">//首先是声明接口: Myface</span><span class="token keyword">interface</span> <span class="token class-name">Myface</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接口要实现的方法都是公有的（public）</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Myclass1</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Myclass2</span><span class="token punctuation">(</span><span class="token variable">$add</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现接口的类名要与接口名不同</span><span class="token keyword">class</span> <span class="token class-name">Myface1</span> <span class="token keyword">implements</span> <span class="token class-name">Myface</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$stu_id</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$stu_name</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$stu_add</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Myclass1</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'ID为：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_id</span><span class="token punctuation">.</span><span class="token string">','</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'名字叫做：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_name</span><span class="token punctuation">.</span><span class="token string">','</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Myclass2</span><span class="token punctuation">(</span><span class="token variable">$add</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_add</span> <span class="token operator">=</span> <span class="token variable">$add</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'住址为：'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stu_add</span><span class="token punctuation">.</span><span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$test3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myface1</span><span class="token punctuation">;</span><span class="token variable">$test3</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Myclass1</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test3</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Myclass2</span><span class="token punctuation">(</span><span class="token string">'皇宫'</span><span class="token punctuation">)</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：ID为：1,名字叫做：李四,住址为：皇宫.*/</span></code></pre><hr><h3 id="4-11常量"><a href="#4-11常量" class="headerlink" title="4.11常量"></a>4.11常量</h3><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。</p><p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。</p><h3 id="4-12抽象类"><a href="#4-12抽象类" class="headerlink" title="4.12抽象类"></a>4.12抽象类</h3><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</p><p>定义为抽象的类不能被实例化。</p><p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p><p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。</p><h3 id="4-13Static-关键字"><a href="#4-13Static-关键字" class="headerlink" title="4.13Static 关键字"></a>4.13Static 关键字</h3><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</p><p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p><p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p><p>静态属性不可以由对象通过 -&gt; 操作符来访问。</p><h3 id="4-14注意"><a href="#4-14注意" class="headerlink" title="4.14注意"></a>4.14注意</h3><ul><li><p><strong>注意</strong>：类名不能和功能名一样，否则报错！！！！</p></li><li><p>如为特别说明，则定一般不区分大小写！！！！</p></li><li><p>私有(private)类成员无法被重写,公有和受保护的可以被重写</p></li><li><p>接口要实现的方法都是公有的（public）</p></li><li><p>实现接口的类名要与接口名不同</p></li></ul><hr><h2 id="5-PHP表单"><a href="#5-PHP表单" class="headerlink" title="5.PHP表单"></a>5.PHP表单</h2><h3 id="5-1-GET变量"><a href="#5-1-GET变量" class="headerlink" title="5.1$_GET变量"></a>5.1$_GET变量</h3><ul><li><p>在 PHP 中，预定义的 $_GET 变量用于收集来自 method=”get” 的表单中的值。</p></li><li><p>预定义的 $_GET 变量用于收集来自 method=”get” 的表单中的值。</p></li><li><p>从带有 GET 方法的表单发送的信息，对任何人都是<code>可见</code>的（会显示在浏览器的地址栏），并且对发送信息的量也有限制。</p></li><li><p>在 HTML 表单中使用 method=”get” 时，所有的变量名和值都会显示在 URL 中。</p></li><li><p><strong>注释：</strong>所以在发送密码或其他敏感信息时，不应该使用这个方法！</p></li></ul><h3 id="5-2-post变量"><a href="#5-2-post变量" class="headerlink" title="5.2$_post变量"></a>5.2$_post变量</h3><ul><li><p>预定义的 $_POST 变量用于收集来自 method=”post” 的表单中的值。</p></li><li><p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p></li></ul><p><strong>注释：</strong>然而，默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）。</p><h3 id="5-3-COOKIE"><a href="#5-3-COOKIE" class="headerlink" title="5.3$_COOKIE"></a>5.3$_COOKIE</h3><p>获取cookie</p><h3 id="5-4-REQUEST"><a href="#5-4-REQUEST" class="headerlink" title="5.4$_REQUEST"></a>5.4$_REQUEST</h3><p>获取get  post  cookie</p><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*html代码        login.html*/</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span>   <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span> 真<span class="token operator">*</span>封神台<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span class="token comment" spellcheck="true">/*php代码    form.php*/</span>    欢迎：<span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token operator">!</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>你的密码为：<span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span>。<span class="token comment" spellcheck="true">/*输出结果：欢迎：aaaa!你的密码为：aaaa。*/</span></code></pre><hr><h3 id="5-3获取下拉菜单数据"><a href="#5-3获取下拉菜单数据" class="headerlink" title="5.3获取下拉菜单数据"></a>5.3获取下拉菜单数据</h3><p>我们可以通过 select 的 name 属性获取下拉菜单的值：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$q</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string">'QQ'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> '<span class="token constant">QQ</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.qq.com/';</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string">'Baidu'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> 'Baidu 搜索<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//baidu.com/';</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string">'QQlive'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> '腾讯视频<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//v.qq.com/';</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>选择一个站点<span class="token punctuation">:</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>QQ<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token constant">QQ</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Baidu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>Baidu<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>QQlive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>QQlive<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：腾讯视频https://v.qq.com/*/</span></code></pre><h2 id="6-PHP操作Msql语句"><a href="#6-PHP操作Msql语句" class="headerlink" title="6.PHP操作Msql语句"></a>6.PHP操作Msql语句</h2><h3 id="6-1连接数据"><a href="#6-1连接数据" class="headerlink" title="6.1连接数据"></a>6.1连接数据</h3><p>只是连接数据库</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>   <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户名</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//密码</span><span class="token comment" spellcheck="true">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检测连接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">echo</span> <span class="token string">"连接成功"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><ul><li>关闭连接</li></ul><pre class=" language-php"><code class="language-php"><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// (MySQLi - 面向对象)</span><span class="token function">mysql_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// (MySQLi - 面向过程)</span></code></pre><h3 id="6-2创建数据库"><a href="#6-2创建数据库" class="headerlink" title="6.2创建数据库"></a>6.2创建数据库</h3><p>create database 数据库</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//调用上述数据库连接</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*创建数据库test1*/</span><span class="token delimiter">&lt;?php</span>    <span class="token variable">$DBname</span> <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">'create database '</span><span class="token punctuation">.</span><span class="token variable">$DBname</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">TRUE</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据库'</span><span class="token punctuation">.</span><span class="token variable">$DBname</span><span class="token punctuation">.</span><span class="token string">'创建成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"数据库创建错误："</span><span class="token punctuation">.</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功 数据库test1创建成功*/</span>  </code></pre><hr><h3 id="6-3创建表格"><a href="#6-3创建表格" class="headerlink" title="6.3创建表格"></a>6.3创建表格</h3><p>要创建表格，肯定要选择数据库之后才能创建</p><p>*<em>选择数据库 *</em>语法：</p><pre class=" language-php"><code class="language-php"><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'db_name'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//先是连接数据库，然后选择数据库</span>或者<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//调用上述数据库连接</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*新建表格*/</span><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*选择库*/</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*建表*/</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">'create table '</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>'<span class="token punctuation">(</span>        id <span class="token function">INT</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token constant">UNSIGNED</span> <span class="token constant">AUTO_INCREMENT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span><span class="token punctuation">,</span>         firstname <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>        lastname <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>        email <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        reg_date <span class="token constant">TIMESTAMP</span>    <span class="token punctuation">)</span>'<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'表：'</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span><span class="token string">'创建成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'创建数据表错误：'</span><span class="token punctuation">.</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功 表：test1创建成功*/</span></code></pre><hr><h3 id="6-4插入数据"><a href="#6-4插入数据" class="headerlink" title="6.4插入数据"></a>6.4插入数据</h3><p>主要的就是sql语句的使用</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*mysql语句*/</span><span class="token constant">INSERT</span> <span class="token constant">INTO</span> <span class="token function">table_name</span> <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//调用上述数据库连接</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span>   <span class="token comment" spellcheck="true">/*选择库*/</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*插入数据*/</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>" <span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Cao'</span><span class="token punctuation">,</span> <span class="token string">'Cao'</span><span class="token punctuation">,</span> <span class="token string">'Caocao@qq.com'</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'数据插入成功'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'插入数据错误：'</span><span class="token punctuation">.</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功 数据插入成功*/</span></code></pre><hr><h3 id="6-5插入多条数据"><a href="#6-5插入多条数据" class="headerlink" title="6.5插入多条数据"></a>6.5插入多条数据</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*连接数据库*/</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?PHP</span>       <span class="token comment" spellcheck="true">/*选择库*/</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>" <span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>"<span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"INSERT INTO "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>" <span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'c@example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>"<span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"INSERT INTO "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>" <span class="token punctuation">(</span>firstname<span class="token punctuation">,</span> lastname<span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'e@example.com'</span><span class="token punctuation">)</span>"<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//mysqli_multi_query() 函数可用来执行多条SQL语句。</span>    <span class="token keyword">echo</span> <span class="token string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Error: "</span> <span class="token punctuation">.</span> <span class="token variable">$sql</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br>"</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功 新记录插入成功*/</span></code></pre><p>操作结果：</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998590/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/4_t20qsq.png" alt="多条插入成功"></p><hr><h3 id="6-6Mysql预处理语句"><a href="#6-6Mysql预处理语句" class="headerlink" title="6.6Mysql预处理语句"></a>6.6Mysql预处理语句</h3><p>预处理语句用于执行多个相同的 SQL 语句，并且执行效率更高。</p><p>预处理语句的工作原理如下：</p><ol><li><p>预处理：创建 SQL 语句模板并发送到数据库。预留的值使用参数 “?” 标记 。例如：</p><pre class=" language-MySQL"><code class="language-MySQL">INSERT INTO MyGuests (firstname, lastname, email) VALUES(?, ?, ?)</code></pre></li><li><p>数据库解析，编译，对SQL语句模板执行查询优化，并存储结果不输出。</p></li><li><p>执行：最后，将应用绑定的值传递给参数（”?” 标记），数据库执行语句。应用可以多次执行语句，如果参数的值不一样。</p></li></ol><p>相比于直接执行SQL语句，预处理语句有两个主要优点：</p><ul><li>预处理语句大大减少了分析时间，只做了一次查询（虽然语句多次执行）。</li><li>绑定参数减少了服务器带宽，你只需要发送查询的参数，而不是整个语句。</li><li>预处理语句针对SQL注入是非常有用的，因为参数值发送后使用不同的协议，保证了数据的合法性。</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*连接数据库*/</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//预处理操作</span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*选择库*/</span><span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 预处理及绑定</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO test1 (firstname, lastname, email) VALUES (?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">,</span> <span class="token variable">$firstname</span><span class="token punctuation">,</span> <span class="token variable">$lastname</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置参数并执行</span><span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string">"g"</span><span class="token punctuation">;</span><span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string">"h"</span><span class="token punctuation">;</span><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string">"g@example.com"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$firstname</span> <span class="token operator">=</span> <span class="token string">"i"</span><span class="token punctuation">;</span><span class="token variable">$lastname</span> <span class="token operator">=</span> <span class="token string">"j"</span><span class="token punctuation">;</span><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token string">"i@example.com"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"新记录插入成功"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功 新记录插入成功*/</span></code></pre><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998590/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/5_gj99wm.png" alt="预处理执行结果"></p><hr><h3 id="6-7MySQL读取数据"><a href="#6-7MySQL读取数据" class="headerlink" title="6.7MySQL读取数据"></a>6.7MySQL读取数据</h3><p>SELECT 语句用于从数据表中读取数据:</p><pre class=" language-mysql"><code class="language-mysql">SELECT column_name(s) FROM table_name</code></pre><p>我们可以使用 * 号来读取所有数据表中的字段：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM table_name</code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*连接数据库*/</span>    <span class="token delimiter">?></span> <span class="token comment" spellcheck="true">/*读取mysql数据*/</span>   <span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*使用数据库*/</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'test1'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*查询语句*/</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select id,firstname,lastname,email from "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*返回结果*/</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"id: "</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" - Name: "</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"firstname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">"lastname"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'无查询结果!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：连接成功id: 1 - Name: Cao Caoid: 2 - Name: a bid: 3 - Name: c did: 4 - Name: e fid: 5 - Name: g hid: 6 - Name: i j*/</span></code></pre><p>以上代码解析如下:</p><p>首先，我们设置了 SQL 语句从 test1 数据表中读取 id, firstname ,lastname 和 email 四个字段。之后我们使用该 SQL 语句从数据库中取出结果集并赋给复制给变量 $result。</p><p>函数<code>num_rows()</code>判断返回的数据。</p><p>如果返回的是多条数据，函数<code>fetch_assoc()</code>将结合集放入到关联数组并循环输出。 while() 循环出结果集，并输出 id, firstname 和 lastname 三个字段值。</p><h3 id="6-8操作总结"><a href="#6-8操作总结" class="headerlink" title="6.8操作总结"></a>6.8操作总结</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/***连接数据库***/</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$db_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*选择数据库*/</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'db_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以与上述2合并，写出1</span><span class="token comment" spellcheck="true">/*执行sql语句*/</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*遍历查询结果*/</span><span class="token number">5</span><span class="token punctuation">.</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//返回一行</span><span class="token number">6</span><span class="token punctuation">.</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回全部内容（一个表）</span><span class="token number">7</span><span class="token punctuation">.</span> <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*关闭数据库连接*/</span><span class="token number">8</span><span class="token punctuation">.</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token string">'$conn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*当返回结果出错时，使用如下语句进行错误查看*/</span><span class="token number">9</span><span class="token punctuation">.</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql_u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/*返回结果*/</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Error: "</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre><ul><li>sql语句用双引号包含</li></ul><h2 id="7-实操"><a href="#7-实操" class="headerlink" title="7.实操"></a>7.实操</h2><p>描述：写一个登陆表单，并实现其注册 + 登录功能。</p><p>要求：<br>　　　1、表单必须和数据库交互。</p><p>​            2、注册和登录功能都必须有</p><p>提示：<br>            1、登录成功后需要给回显</p><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><pre class=" language-php"><code class="language-php">create database fun<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//fun数据库</span></code></pre><h3 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2.创建数据表"></a>2.创建数据表</h3><pre class=" language-php"><code class="language-php">create table <span class="token function">learn1</span><span class="token punctuation">(</span>id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> primary key auto_increment not <span class="token keyword">null</span><span class="token punctuation">,</span> name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> not <span class="token keyword">null</span><span class="token punctuation">,</span>username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> not <span class="token keyword">null</span><span class="token punctuation">,</span> passwd <span class="token function">varchar</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> not <span class="token keyword">null</span><span class="token punctuation">,</span> email <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> phone <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> not <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//learn1表</span></code></pre><h3 id="3-编写数据库连接代码"><a href="#3-编写数据库连接代码" class="headerlink" title="3.编写数据库连接代码"></a>3.编写数据库连接代码</h3><p>mysql.php</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*mysql.php*/</span><span class="token delimiter">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>   <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户名</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"123.com"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//密码</span><span class="token comment" spellcheck="true">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h3 id="4-编写登录界面"><a href="#4-编写登录界面" class="headerlink" title="4.编写登录界面"></a>4.编写登录界面</h3><p>cos封神台的登录界面</p><p>登录界面  index.html</p><pre class=" language-php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注释掉防止影响原本界面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>真<span class="token operator">*</span>封神台<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span>main<span class="token punctuation">{</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*让div内部文字居中*/</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>height<span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>margin<span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//position: absolute;</span>margin<span class="token operator">-</span>top<span class="token punctuation">:</span>200px<span class="token punctuation">;</span>left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>body<span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//res.cloudinary.com/valent/image/upload/v1592917740/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/2_rc91oh.png);</span><span class="token punctuation">}</span><span class="token punctuation">.</span>in<span class="token operator">-</span>n<span class="token operator">-</span>p <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    border<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 10px 12px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>in<span class="token operator">-</span>n<span class="token operator">-</span>p2 <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">25</span><span class="token operator">%</span><span class="token punctuation">;</span>    border<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 10px 12px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#e8f0fe;</span><span class="token punctuation">}</span>input <span class="token punctuation">{</span>    border<span class="token operator">-</span>style<span class="token punctuation">:</span> inset<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#e8f0fe;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>logo <span class="token punctuation">{</span>    text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>logo <span class="token punctuation">.</span>cnsmr<span class="token operator">-</span>app<span class="token operator">-</span>image <span class="token punctuation">{</span>    max<span class="token operator">-</span>width<span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>    max<span class="token operator">-</span>height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>si<span class="token operator">-</span>container<span class="token operator">-</span>title<span class="token punctuation">,</span> <span class="token punctuation">.</span>sf<span class="token operator">-</span>ns<span class="token operator">-</span>ui h2 <span class="token punctuation">{</span>    font<span class="token operator">-</span>family<span class="token punctuation">:</span> <span class="token string">"SFNSDisplay"</span><span class="token punctuation">,</span> <span class="token string">"SFNSText"</span><span class="token punctuation">,</span> <span class="token string">"Myriad Set Pro"</span><span class="token punctuation">,</span> <span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span><span class="token punctuation">}</span>h1 <span class="token punctuation">{</span>    display<span class="token punctuation">:</span> block<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span>    margin<span class="token operator">-</span>block<span class="token operator">-</span>start<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">.</span>67em<span class="token punctuation">;</span>    margin<span class="token operator">-</span>block<span class="token operator">-</span>end<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">.</span>67em<span class="token punctuation">;</span>    margin<span class="token operator">-</span>inline<span class="token operator">-</span>start<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>inline<span class="token operator">-</span>end<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    font<span class="token operator">-</span>weight<span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    color<span class="token punctuation">:</span><span class="token shell-comment comment">#ffffff;</span><span class="token punctuation">}</span>a <span class="token punctuation">{</span>text<span class="token operator">-</span>decoration<span class="token punctuation">:</span>none<span class="token punctuation">;</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#000000;</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>       <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token comment" spellcheck="true">&lt;!--post类型--></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cnsmr-app-image<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">141</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://res.cloudinary.com/valent/image/upload/v1592917742/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/1_p0rsq5.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>si-container-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>使用<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">36</span>px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">15</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>靶场<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>登陆名登陆<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>登录<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./register.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>注册<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>  <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>   <span class="token operator">--</span><span class="token operator">></span>                </code></pre><h3 id="5-编写登录解析代码"><a href="#5-编写登录解析代码" class="headerlink" title="5.编写登录解析代码"></a>5.编写登录解析代码</h3><p>login.php</p><ol><li>首先是获取表单输入的数据</li><li>判断是否为空</li><li>判断密码是否与数据库中密码一致</li><li>然后跳转到信息页面</li></ol><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">include</span> <span class="token string">'mysql.php'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*引用数据库连接文件*/</span><span class="token delimiter">?></span>   <span class="token delimiter">&lt;?php</span>    <span class="token comment" spellcheck="true">/*使用数据库*/</span>    <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'learn1'</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token variable">$passwd</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script language='JavaScript'> "</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"alert('请输入用户名和密码！！！');"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//弹窗提示</span>        <span class="token keyword">echo</span> <span class="token string">" history.back()"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//跳转登录页</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*查询语句*/</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select id ,name, username , email ,phone,passwd from "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span><span class="token string">" where username='"</span><span class="token punctuation">.</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">"' and passwd='"</span><span class="token punctuation">.</span><span class="token variable">$passwd</span><span class="token punctuation">.</span><span class="token string">"';"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取得到的结果*/</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$passwd</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*防止一些sql语句*/</span>        <span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*结果赋值*/</span>        <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$email</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$phone</span><span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script language='JavaScript'> "</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"alert('请输入正确的用户名和密码！！！');"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//弹窗提示</span>        <span class="token keyword">echo</span> <span class="token string">" history.back()"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//跳转登录页</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>         <span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> "<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>跳转<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text/css<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>    body<span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//res.cloudinary.com/valent/image/upload/v1592917740/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/2_rc91oh.png);</span>color<span class="token punctuation">:</span>white<span class="token punctuation">;</span>font<span class="token operator">-</span>size<span class="token punctuation">:</span>20px<span class="token punctuation">;</span>text<span class="token operator">-</span>align <span class="token punctuation">:</span> left<span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>欢迎：<span class="token string">".$username."</span> 登录！！<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></span>您的信息如下：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span><span class="token constant">ID</span>为：<span class="token string">".$id."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>名字：<span class="token string">".$name."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>邮箱：<span class="token string">".$email."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>电话：<span class="token string">".$phone."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://hack.zkaq.cn/battle<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span>点击进入<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h3 id="6-编写注册界面"><a href="#6-编写注册界面" class="headerlink" title="6.编写注册界面"></a>6.编写注册界面</h3><p>同样cos封神台注册界面</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--注册界面 register.html --></span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注释掉防止影响原本界面<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>封神榜<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span>body<span class="token punctuation">{</span>background<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//res.cloudinary.com/valent/image/upload/v1592917740/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/2_rc91oh.png);</span>background<span class="token operator">-</span>attachment<span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    background<span class="token operator">-</span>size<span class="token punctuation">:</span> contain<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#000;</span>    overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    font<span class="token operator">-</span>family<span class="token punctuation">:</span> <span class="token string">"Lato"</span><span class="token punctuation">,</span> <span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    color<span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token punctuation">:</span> <span class="token number">1.4285</span><span class="token punctuation">;</span>    margin<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>in<span class="token operator">-</span>n<span class="token operator">-</span>l<span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token operator">%</span><span class="token punctuation">;</span>    float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> right<span class="token punctuation">;</span>  margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span> size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token punctuation">.</span>in<span class="token operator">-</span>n<span class="token operator">-</span>p <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">70</span><span class="token operator">%</span><span class="token punctuation">;</span>    border<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 10px 12px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>    box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">.</span>in<span class="token operator">-</span>n<span class="token operator">-</span>p2 <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token operator">%</span><span class="token punctuation">;</span>    border<span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>    padding<span class="token punctuation">:</span> 10px 12px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token shell-comment comment">#e8f0fe;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>main<span class="token punctuation">{</span>text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*让div内部文字居中*/</span>border<span class="token operator">-</span>radius<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>width<span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>margin<span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//position: absolute;</span>margin<span class="token operator">-</span>top<span class="token punctuation">:</span>100px<span class="token punctuation">;</span>left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>form<span class="token operator">-</span>group <span class="token punctuation">{</span>    margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>margin<span class="token operator">-</span>right<span class="token punctuation">:</span> <span class="token operator">-</span>15px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span>15px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-8 col-md-offset-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">1</span>px<span class="token punctuation">;</span><span class="token property">border-style</span><span class="token punctuation">:</span> none none solid<span class="token punctuation">;</span><span class="token property">border-color</span><span class="token punctuation">:</span> currentColor currentColor transparent<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">border-image</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">255</span>, <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">22.5</span>px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">21</span>px<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                    加入我们                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>你的姓名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>你的姓名*必填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>               <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>登陆名<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>               <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录名*必填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>密码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码*必填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>电子邮箱<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电子邮箱*必填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span>手机号码<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>手机号码*必填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>                        重置                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>                    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>in-n-p2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>     <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span class="token operator">--</span><span class="token operator">></span></code></pre><h3 id="7-编写注册解析代码"><a href="#7-编写注册解析代码" class="headerlink" title="7.编写注册解析代码"></a>7.编写注册解析代码</h3><p>注册解析过程</p><ol><li>判断输入数据是否为空，为空则弹窗提示填写完整数据并返回注册界面</li><li>不为空则继续判断是否存在，如果存在则弹窗提示，并返回注册界面</li><li>不存在则执行sql语句，提示注册成功并跳转登录界面</li></ol><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*register.php*/</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">include</span> <span class="token string">'mysql.php'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*引用数据库连接文件*/</span><span class="token delimiter">?></span>  <span class="token delimiter">&lt;?php</span> <span class="token comment" spellcheck="true">/*数据库连接成功*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*选择数据库 fun*/</span>    <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token string">'fun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*数据库选择成功*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$tb_name</span> <span class="token operator">=</span> <span class="token string">'learn1'</span><span class="token punctuation">;</span>    <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/*获取表单输入的数据*/</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token variable">$username</span><span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token variable">$passwd</span><span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token variable">$email</span><span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token variable">$phone</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script language='JavaScript'>"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"alert('请填写完整信息!!!!');"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//弹窗提示</span>        <span class="token keyword">echo</span> <span class="token string">" history.back();"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//放回历史上一页</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*查询用户是否存在*/</span>      <span class="token variable">$sql_u</span> <span class="token operator">=</span> <span class="token string">"select * from "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span><span class="token string">" where username='"</span><span class="token punctuation">.</span><span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">"';"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*查询*/</span>     <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql_u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/*返回结果*/</span>     <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script language='JavaScript'> "</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"alert('该用户名已存在，请重新填写');"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//弹窗提示</span>        <span class="token keyword">echo</span> <span class="token string">" history.back();"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//返回历史上一页</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token punctuation">.</span><span class="token variable">$tb_name</span><span class="token punctuation">.</span>" <span class="token punctuation">(</span>name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> passwd<span class="token punctuation">,</span>email<span class="token punctuation">,</span>phone<span class="token punctuation">)</span>    <span class="token function">values</span> <span class="token punctuation">(</span><span class="token string">'".$name."'</span><span class="token punctuation">,</span><span class="token string">'". $username."'</span><span class="token punctuation">,</span><span class="token string">'".$passwd."'</span><span class="token punctuation">,</span><span class="token string">'".$email."'</span><span class="token punctuation">,</span><span class="token string">'".$phone."'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>"<span class="token punctuation">;</span>    <span class="token variable">$check</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$check</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;script language='JavaScript'> "</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"alert('注册完成，正在跳转登录，请稍后。。。');"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//弹窗提示</span>        <span class="token keyword">echo</span> <span class="token string">" location.href='./index.html';"</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//跳转登录页</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;/script>"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h3 id="8-效果展示"><a href="#8-效果展示" class="headerlink" title="8.效果展示"></a>8.效果展示</h3><h4 id="1-注册界面"><a href="#1-注册界面" class="headerlink" title="1.注册界面"></a>1.注册界面</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/6_cjpau6.png" alt="注册界面展示"></p><h4 id="2-进行用户注册"><a href="#2-进行用户注册" class="headerlink" title="2.进行用户注册"></a>2.进行用户注册</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/7_gc57ww.png" alt="注册"></p><h4 id="3-注册成功"><a href="#3-注册成功" class="headerlink" title="3.注册成功"></a>3.注册成功</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/8_jxygbm.png" alt="成功"></p><h4 id="4-注册成功跳转登录界面进行登录"><a href="#4-注册成功跳转登录界面进行登录" class="headerlink" title="4.注册成功跳转登录界面进行登录"></a>4.注册成功跳转登录界面进行登录</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/9_qzn3xw.png" alt="登录"></p><h4 id="5-登录成功"><a href="#5-登录成功" class="headerlink" title="5.登录成功"></a>5.登录成功</h4><p>登录成功后进入用户界面，显示用户信息</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/10_yi9gxq.png" alt="登录成功页面"></p><h4 id="6-最后–点击进入"><a href="#6-最后–点击进入" class="headerlink" title="6.最后–点击进入"></a>6.最后–点击进入</h4><p>点击进入，跳转到靶场</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998593/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/11_kxlvpa.png" alt="点击进入"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3后端基础PHP</title>
      <link href="/2020/06/20/2-3-hou-duan-ji-chu-php/"/>
      <url>/2020/06/20/2-3-hou-duan-ji-chu-php/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>PHP学习</p></blockquote><h1 id="后端基础PHP"><a href="#后端基础PHP" class="headerlink" title="后端基础PHP"></a>后端基础PHP</h1><hr><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ol><li><p>前端–展示，后端–控制</p></li><li><p>标准PHP 【ASP|ASPX|PHP|JSP】</p></li><li><p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。</p></li></ol><p>php简单小例子：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><h3 id="1-PHP简介"><a href="#1-PHP简介" class="headerlink" title="1. PHP简介"></a>1. PHP简介</h3><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li></ul><h3 id="2-PHP-文件"><a href="#2-PHP-文件" class="headerlink" title="2.PHP 文件"></a>2.PHP 文件</h3><ul><li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</li><li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li><li>PHP 文件的默认文件扩展名是 “.php”</li></ul><h3 id="3-PHP-能做什么"><a href="#3-PHP-能做什么" class="headerlink" title="3.PHP 能做什么"></a>3.PHP 能做什么</h3><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ul><p>通过 PHP，将不再限于输出 HTML。可以输出图像、PDF 文件，甚至 Flash 电影。还可以输出任意的文本，比如 XHTML 和 XML。</p><hr><h2 id="2-PHP语法"><a href="#2-PHP语法" class="headerlink" title="2.PHP语法"></a>2.PHP语法</h2><p>PHP写网页的！！！</p><h3 id="1-基本PHP语法"><a href="#1-基本PHP语法" class="headerlink" title="1.基本PHP语法"></a>1.基本PHP语法</h3><p>PHP 脚本可以放在文档中的任何位置。</p><p>PHP 脚本以 <strong>&lt;?php</strong> 开始，以 <strong>?&gt;</strong> 结束：</p><p>常用方法：</p><pre class=" language-php"><code class="language-php">最常用<span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// PHP 代码</span><span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//注释   </span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 这是 PHP 单行注释</span><span class="token comment" spellcheck="true">/*这是PHP 多行注释*/</span><span class="token delimiter">?></span></code></pre><pre class=" language-php"><code class="language-php">过检测机制<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>示例：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"PHP,hello World!!!!"</span>    <span class="token comment" spellcheck="true">//echo为输出指令</span><span class="token delimiter">?></span></code></pre><p><img src="" alt="Hello"></p><hr><h3 id="2-PHP变量"><a href="#2-PHP变量" class="headerlink" title="2.PHP变量"></a>2.PHP变量</h3><ul><li>变量是用于存储信息的”容器”：</li></ul><p>例子：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token comment" spellcheck="true">//$ 代表的是变量标识</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此时变量为x,y,z,直接定义变量并赋值</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token variable">$z</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//双引号解析输出    </span> <span class="token comment" spellcheck="true">//单引号直接输出</span></code></pre><h4 id="2-1-PHP变量规则"><a href="#2-1-PHP变量规则" class="headerlink" title="2.1.PHP变量规则"></a>2.1.PHP变量规则</h4><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名是区分大小写的（<code>$y</code> 和 <code>$Y</code> 是两个不同的变量）</li><li><code>PHP</code>没有声明变量的命令。变量在您第一次赋值给它的时候被创建：</li></ul><h4 id="2-2PHP-变量作用域"><a href="#2-2PHP-变量作用域" class="headerlink" title="2.2PHP 变量作用域"></a>2.2PHP 变量作用域</h4><p>变量的作用域是脚本中变量可被引用/使用的部分。</p><p>PHP 有四种不同的变量作用域：</p><ul><li>local</li><li>global   //全局变量</li><li>static   //静态变量  每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</li><li>parameter</li></ul><hr><h3 id="3-PHP-echo与print语句"><a href="#3-PHP-echo与print语句" class="headerlink" title="3.PHP echo与print语句"></a>3.PHP echo与print语句</h3><p>echo 和 print 区别:</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1</li></ul><ul><li>echo与print都可以拼接字符使用<code>.</code>进行凭借</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token string">'b'</span><span class="token punctuation">.</span><span class="token string">''</span>c    <span class="token comment" spellcheck="true">//字符拼接</span><span class="token comment" spellcheck="true">//输出为：abc</span><span class="token keyword">echo</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//echo可以这样输出多个字符串</span><span class="token keyword">print</span> <span class="token string">'a'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//print只能一个一个字符串输出</span></code></pre><hr><h3 id="4-PHP函数"><a href="#4-PHP函数" class="headerlink" title="4.PHP函数"></a>4.PHP函数</h3><ul><li><p>如要在页面加载时执行脚本，您可以把它放到函数里。</p></li><li><p>函数是通过调用函数来执行的。你可以在页面的任何位置调用函数。</p></li><li><p>即函数则是一个功能模块</p></li></ul><h4 id="4-1-创建函数"><a href="#4-1-创建函数" class="headerlink" title="4.1.创建函数"></a>4.1.创建函数</h4><p>函数是通过调用函数来执行的。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//函数模块一般写法</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 要执行的代码</span><span class="token punctuation">}</span><span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用函数</span><span class="token delimiter">?></span></code></pre><p>PHP 函数准则：</p><ul><li>函数的名称应该提示出它的功能</li><li>函数名称以字母或下划线开头（不能以数字开头）</li></ul><h4 id="4-2-函数添加参数"><a href="#4-2-函数添加参数" class="headerlink" title="4.2.函数添加参数"></a>4.2.函数添加参数</h4><p>为了给函数添加更多的功能，我们可以添加参数，参数类似变量。</p><p>参数就在函数名称后面的一个括号内指定。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//此时 $b为局部变量，只在此功能使用</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$b</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回 形参</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回 3+1=4，返回4</span><span class="token delimiter">?></span></code></pre><h4 id="4-3-函数返回值"><a href="#4-3-函数返回值" class="headerlink" title="4.3.函数返回值"></a>4.3.函数返回值</h4><p>如需让函数返回一个值，请使用 return 语句。</p><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function">R_</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token keyword">and</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'4 ? 5谁大：'</span><span class="token punctuation">.</span><span class="token function">R_</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：4 ? 5谁大：5*/</span></code></pre><hr><h3 id="5-PHP数据类型"><a href="#5-PHP数据类型" class="headerlink" title="5.PHP数据类型"></a>5.PHP数据类型</h3><h4 id="5-1字符串"><a href="#5-1字符串" class="headerlink" title="5.1字符串"></a>5.1字符串</h4><p>一个字符串是一串字符的序列，就像 “Hello world!”。</p><p>你可以将任何文本放在单引号和双引号中：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">'Hello world!!!!'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$x</span><span class="token operator">=</span><span class="token string">"Hello world!!!!"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>输出单引号和双引号中的字符串是一样的</p><p><img src="" alt="输出结果"></p><hr><h4 id="5-2整型"><a href="#5-2整型" class="headerlink" title="5.2整型"></a>5.2整型</h4><p>整数是一个没有小数的数字。</p><p>整数规则:</p><ul><li>整数必须至少有一个数字 (0-9)</li><li>整数不能包含逗号或空格</li><li>整数是没有小数点的</li><li>整数可以是正数或负数</li><li>整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</li></ul><p>PHP var_dump() 函数返回变量的数据类型和值：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">5201314</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//10进制</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">11314</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//10进制</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token number">0x8c</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//16进制</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$d</span><span class="token operator">=</span><span class="token number">05</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//8进制</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token delimiter">?></span></code></pre><p>输出结果：int(5201314) int(-11314) int(140) int(5)</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592998591/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/PHP/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/3_gavkte.png" alt="整型"></p><hr><h4 id="5-3浮点型"><a href="#5-3浮点型" class="headerlink" title="5.3浮点型"></a>5.3浮点型</h4><p>浮点数是带小数部分的数字，或是指数形式。</p><p>PHP var_dump() 函数返回变量的数据类型和值：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">520.1314</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">520e13</span><span class="token punctuation">;</span>      <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token number">20e-3</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出结果为： float(520.1314) float(5.2E+15) float(0.02)</p><hr><h4 id="5-4布尔类型"><a href="#5-4布尔类型" class="headerlink" title="5.4布尔类型"></a>5.4布尔类型</h4><p>通常为true/false</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token variable">$a</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>返回结果：bool(true) bool(false)</p><hr><h4 id="5-5数组类型"><a href="#5-5数组类型" class="headerlink" title="5.5数组类型"></a>5.5数组类型</h4><p>数组：可以在一个变量里面存放多个值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>   <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'qq'</span><span class="token punctuation">,</span><span class="token string">'wechat'</span><span class="token punctuation">,</span><span class="token string">'ali'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出：array(3) { [0]=&gt; string(2) “qq” [1]=&gt; string(6) “wechat” [2]=&gt; string(3) “ali” }</p><hr><h4 id="5-6对象"><a href="#5-6对象" class="headerlink" title="5.6对象"></a>5.6对象</h4><p>对象数据类型也可以用于存储数据。</p><p>在 PHP 中，对象必须声明。</p><p>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">color</span> <span class="token operator">=</span> <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">what_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">color</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">print_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$prop</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string">"\t$prop = $val\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例一个对象</span><span class="token variable">$herbie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 显示 herbie 属性</span><span class="token keyword">echo</span> <span class="token string">"\therbie: Properties\n"</span><span class="token punctuation">;</span><span class="token function">print_vars</span><span class="token punctuation">(</span><span class="token variable">$herbie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p>输出： herbie: Properties color = white</p><hr><h4 id="5-7NULL值"><a href="#5-7NULL值" class="headerlink" title="5.7NULL值"></a>5.7NULL值</h4><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。</p><p>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//赋值为空</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出： null</p><hr><h3 id="6-PHP常量"><a href="#6-PHP常量" class="headerlink" title="6.PHP常量"></a>6.PHP常量</h3><p>常量是一个简单值的标识符。常量值被定义后，在脚本的其他任何地方都不能被改变。</p><p>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。</p><p><strong>注意：</strong> 常量在整个脚本中都可以使用。</p><h4 id="6-1常量的设置"><a href="#6-1常量的设置" class="headerlink" title="6.1常量的设置"></a>6.1常量的设置</h4><pre class=" language-php"><code class="language-php">bool <span class="token function">define</span> <span class="token punctuation">(</span> string <span class="token variable">$name</span> <span class="token punctuation">,</span> mixed <span class="token variable">$value</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> bool <span class="token variable">$case_insensitive</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><p>该函数有三个参数:</p><ul><li><strong>name：</strong>必选参数，常量名称，即标志符。</li><li><strong>value：</strong>必选参数，常量的值。</li><li><strong>case_insensitive</strong> ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><p>例子区分大小写：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>      <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'Hello,world!!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> A<span class="token punctuation">;</span>    <span class="token keyword">echo</span> a<span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出结果：</p><p> Hello,world!!!!   （A正常输出）</p><p>（报错）</p><p>例子不区分大小写：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'Hello,world!!!!'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> A<span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> a<span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出结果：</p><p>Hello,world!!!!<br>Hello,world!!!!</p><h4 id="6-2知识"><a href="#6-2知识" class="headerlink" title="6.2知识"></a>6.2知识</h4><ul><li><p>常量定义完成后为全局变量</p></li><li><p>常量的使用不需要$</p></li><li><p>变量则需要变量标识符$</p></li></ul><hr><h3 id="7-PHP字符串变量"><a href="#7-PHP字符串变量" class="headerlink" title="7.PHP字符串变量"></a>7.PHP字符串变量</h3><p>字符串变量用来存储字符串</p><h4 id="7-1字符串变量"><a href="#7-1字符串变量" class="headerlink" title="7.1字符串变量"></a>7.1字符串变量</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'Hello,world!!!!!'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//变量a存储字符串 Hello,world!!!!!</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出变量a</span><span class="token delimiter">?></span> <span class="token comment" spellcheck="true">//输出为：Hello,world!!!!!    </span></code></pre><hr><h4 id="7-2并置运算符"><a href="#7-2并置运算符" class="headerlink" title="7.2并置运算符"></a>7.2并置运算符</h4><p>在 PHP 中，只有一个字符串运算符。</p><p>并置运算符 <code>.</code> 用于把两个字符串值连接起来。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token string">'Hello'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token string">'world!!!!'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'并置运算符'</span><span class="token punctuation">.</span><span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token variable">$c</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*结果输出：并置运算符Hello,world!!!!*/</span></code></pre><hr><h4 id="7-3strlen-函数"><a href="#7-3strlen-函数" class="headerlink" title="7.3strlen()函数"></a>7.3strlen()函数</h4><ul><li><p>strlen() 函数返回字符串的长度（字节数）。</p></li><li><p>返回字符串的长度</p></li><li><p>用法：strlen(‘字符串’)</p></li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">'Hello,world!!!!'</span><span class="token punctuation">)</span>  <span class="token delimiter">?></span><span class="token comment" spellcheck="true">//返回结果： 15   </span><span class="token comment" spellcheck="true">//（5+1+5+4）</span></code></pre><hr><h4 id="7-4strpos-函数"><a href="#7-4strpos-函数" class="headerlink" title="7.4strpos()函数"></a>7.4strpos()函数</h4><ul><li><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。</p></li><li><p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。 </p></li><li><p>用法：strpos(‘字符串’,’要查找的字符串’)；</p></li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token string">'Hello,world!!!!'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">'ello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">//返回结果：1</span><span class="token comment" spellcheck="true">//在上面的实例中，字符串 "ello" 的位置是 1 。之所以是 1 而不是 2 的原因是，字符串中第一个字符的位置是 0，而不是 1。</span></code></pre><hr><h3 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h3><h4 id="8-1算数运算符"><a href="#8-1算数运算符" class="headerlink" title="8.1算数运算符"></a>8.1算数运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>x + y</td><td>加</td><td>x 和 y 的和</td><td>2 + 2</td><td>4</td></tr><tr><td>x - y</td><td>减</td><td>x 和 y 的差</td><td>5 - 2</td><td>3</td></tr><tr><td>x * y</td><td>乘</td><td>x 和 y 的积</td><td>5 * 2</td><td>10</td></tr><tr><td>x / y</td><td>除</td><td>x 和 y 的商</td><td>15 / 5</td><td>3</td></tr><tr><td>x % y</td><td>模（除法的余数）</td><td>x 除以 y 的余数</td><td>5 % 2 </br>10 % 8 </br>10 % 2</td><td>1 </br>2 </br>0</td></tr><tr><td>- x</td><td>取反</td><td>x 取反</td><td>$x =2; </br>echo -$x;</br></td><td>-2</td></tr><tr><td>a . b</td><td>并置</td><td>连接两个字符串</td><td>“Hi” . “Ha”</td><td>HiHa</td></tr></tbody></table><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'+'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">+</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//减</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'*'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">*</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//乘</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">/</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//除</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'%'</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">%</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//模</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span>    <span class="token keyword">echo</span> <span class="token string">'-'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'='</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//取反</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//换行</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果为：6+4=106-4=26*4=246/4=1.56%4=2-6=-6*/</span></code></pre><hr><h4 id="8-2赋值运算符"><a href="#8-2赋值运算符" class="headerlink" title="8.2赋值运算符"></a>8.2赋值运算符</h4><p>在 PHP 中，基本的赋值运算符是 “=”。它意味着左操作数被设置为右侧表达式的值。也就是说，”$x = 5” 的值是 5。</p><table><thead><tr><th>运算符</th><th>等同于</th><th>描述</th></tr></thead><tbody><tr><td>x = y</td><td>x = y</td><td>左操作数被设置为右侧表达式的值</td></tr><tr><td>x += y</td><td>x = x + y</td><td>加</td></tr><tr><td>x -= y</td><td>x = x - y</td><td>减</td></tr><tr><td>x *= y</td><td>x = x * y</td><td>乘</td></tr><tr><td>x /= y</td><td>x = x / y</td><td>除</td></tr><tr><td>x %= y</td><td>x = x % y</td><td>模（除法的余数）</td></tr><tr><td>a .= b</td><td>a = a . b</td><td>连接两个字符串</td></tr></tbody></table><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//赋值</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//减</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">*</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//乘</span>    <span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$d</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$d</span><span class="token operator">/</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//除</span>    <span class="token keyword">echo</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$e</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$e</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//模</span>    <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果10182801.252*/</span></code></pre><hr><h4 id="8-3递增-递减"><a href="#8-3递增-递减" class="headerlink" title="8.3递增/递减"></a>8.3递增/递减</h4><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>++ x</td><td>预递增</td><td>x 加 1，然后返回 x</td></tr><tr><td>x ++</td><td>后递增</td><td>返回 x，然后 x 加 1</td></tr><tr><td>– x</td><td>预递减</td><td>x 减 1，然后返回 x</td></tr><tr><td>x –</td><td>后递减</td><td>返回 x，然后 x 减 1</td></tr></tbody></table><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token operator">--</span><span class="token variable">$c</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token variable">$d</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$d</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：1110910*/</span></code></pre><hr><h4 id="8-4比较运算符"><a href="#8-4比较运算符" class="headerlink" title="8.4比较运算符"></a>8.4比较运算符</h4><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>x == y</td><td>等于</td><td>如果 x 等于 y，则返回 true</td><td>5==8 返回 false</td></tr><tr><td>x === y</td><td>绝对等于</td><td>如果 x 等于 y，且它们类型相同，则返回 true</td><td>5===”5” 返回 false</td></tr><tr><td>x != y</td><td>不等于</td><td>如果 x 不等于 y，则返回 true</td><td>5!=8 返回 true</td></tr><tr><td>x &lt;&gt; y</td><td>不等于</td><td>如果 x 不等于 y，则返回 true</td><td>5&lt;&gt;8 返回 true</td></tr><tr><td>x !== y</td><td>绝对不等于</td><td>如果 x 不等于 y，或它们类型不相同，则返回 true</td><td>5!==”5” 返回 true</td></tr><tr><td>x &gt; y</td><td>大于</td><td>如果 x 大于 y，则返回 true</td><td>5&gt;8 返回 false</td></tr><tr><td>x &lt; y</td><td>小于</td><td>如果 x 小于 y，则返回 true</td><td>5&lt;8 返回 true</td></tr><tr><td>x &gt;= y</td><td>大于等于</td><td>如果 x 大于或者等于 y，则返回 true</td><td>5&gt;=8 返回 false</td></tr><tr><td>x &lt;= y</td><td>小于等于</td><td>如果 x 小于或者等于 y，则返回 true</td><td>5&lt;=8 返回 true</td></tr></tbody></table><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token string">'100'</span><span class="token punctuation">;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比较数值</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比较数值与类型</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!=</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//a不等于b</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//a不等于b</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">!==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比较数值与类型</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">></span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比较大小</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//比较大小</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;/br>'</span><span class="token punctuation">;</span>     <span class="token delimiter">?></span> <span class="token comment" spellcheck="true">/*输出结果：bool(true)bool(false)bool(false)bool(false)bool(true)bool(false)bool(true)*/</span></code></pre><hr><h3 id="9-PHP-条件语句"><a href="#9-PHP-条件语句" class="headerlink" title="9.PHP 条件语句"></a>9.PHP 条件语句</h3><p>当您编写代码时，您常常需要为不同的判断执行不同的动作。您可以在代码中使用条件语句来完成此任务。</p><p>在 PHP 中，提供了下列条件语句：</p><ul><li><strong>if 语句</strong> - 在条件成立时执行代码</li><li><strong>if…else 语句</strong> - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li><li><strong>if…elseif….else 语句</strong> - 在若干条件之一成立时执行一个代码块</li><li><strong>switch 语句</strong> - 在若干条件之一成立时执行一个代码块</li></ul><h4 id="9-1if语句"><a href="#9-1if语句" class="headerlink" title="9.1if语句"></a>9.1if语句</h4><p>语法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//条件成立时执行</span><span class="token punctuation">}</span></code></pre><p>操作</p><pre class=" language-PHP"><code class="language-PHP"><?PHPfunction chengji($a){    if($a>=90){      echo '成绩为'.$a.'为A级别';      }}chengji(100);?>/*输出结果成绩为100为A级别*/</code></pre><hr><h4 id="9-2if…else语句"><a href="#9-2if…else语句" class="headerlink" title="9.2if…else语句"></a>9.2if…else语句</h4><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//条件成立时执行该处语句</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//条件不成立时，执行该处语句</span><span class="token punctuation">}</span></code></pre><p>操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">chengji2</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为A级别'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为B级别'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为c级别'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',未及格'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token function">chengji2</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果:0.成绩为:59,未及格*/</span></code></pre><hr><h4 id="9-3if…elseif…else语句"><a href="#9-3if…elseif…else语句" class="headerlink" title="9.3if…elseif…else语句"></a>9.3if…elseif…else语句</h4><p>语法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//if 条件成立时执行的代码;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//elseif 条件成立时执行的代码;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//条件不成立时执行的代码;</span><span class="token punctuation">}</span></code></pre><p>操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">chengji3</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为A级别'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为B级别'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为c级别'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>               <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',未及格'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token function">chengji3</span><span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果：成绩为:79,为c级别*/</span></code></pre><hr><h4 id="9-4switch语句"><a href="#9-4switch语句" class="headerlink" title="9.4switch语句"></a>9.4switch语句</h4><p>如果您希望<strong>有选择地执行若干代码块之一</strong>，请使用 switch 语句。</p><p>语句：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> label1<span class="token punctuation">:</span>    如果 <span class="token variable">$a</span><span class="token operator">=</span>label1，此处代码将执行<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> label2<span class="token punctuation">:</span>    如果 <span class="token variable">$a</span><span class="token operator">=</span>label2，此处代码将执行<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    如果 a 既不等于 label1 也不等于 label2，此处代码将执行<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>操作：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">chengji4</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为A级别'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">80</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为B级别'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token variable">$a</span><span class="token operator">>=</span><span class="token number">60</span> <span class="token keyword">and</span> <span class="token variable">$a</span><span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',为c级别'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">echo</span> <span class="token string">'成绩为:'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">',未及格，请继续努力！'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token function">chengji4</span><span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token delimiter">?></span><span class="token comment" spellcheck="true">/*输出结果:成绩为:59,未及格，请继续努力！*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali-3.2SQLmap获取管理员权限</title>
      <link href="/2020/06/19/kali-3-2sqlmap-huo-qu-guan-li-yuan-quan-xian/"/>
      <url>/2020/06/19/kali-3-2sqlmap-huo-qu-guan-li-yuan-quan-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>kali渗透</p><p>sqlmap</p></blockquote><h1 id="1-SQLmap获取管理员权限"><a href="#1-SQLmap获取管理员权限" class="headerlink" title="1.SQLmap获取管理员权限"></a>1.SQLmap获取管理员权限</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><h3 id="1-webshell"><a href="#1-webshell" class="headerlink" title="1.webshell"></a>1.webshell</h3><p>获取服务器操作权限</p><h3 id="2-使用者"><a href="#2-使用者" class="headerlink" title="2.使用者"></a>2.使用者</h3><ol><li>站长</li></ol><p>网站管理</p><ol start="2"><li>入侵者</li></ol><p>木马</p><p>1.小马</p><p>文件较小，文件上传，文件修改，文件管理</p><p>2.大马</p><p>3.一句话木马</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2.2后端基础SQL-数据库</title>
      <link href="/2020/06/18/2-2-hou-duan-ji-chu-sql-shu-ju-ku/"/>
      <url>/2020/06/18/2-2-hou-duan-ji-chu-sql-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>SQL-数据库</p></blockquote><h1 id="1-数据库基础"><a href="#1-数据库基础" class="headerlink" title="1.数据库基础"></a>1.数据库基础</h1><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>数据库：用于存储数据</p><p>常见数据库</p><table><thead><tr><th>数据库工具</th><th>所属公司</th></tr></thead><tbody><tr><td>Oracle Database</td><td>甲骨文公司</td></tr><tr><td>SQL Server</td><td>微软公司</td></tr><tr><td>DB2</td><td>IBM公司</td></tr><tr><td>PostgreSQL</td><td>开源</td></tr><tr><td>MySQL （主流）</td><td>开源</td></tr><tr><td>Access</td><td>微软公司（老古董）</td></tr></tbody></table><p>数据库的语法是差不多的</p><h3 id="2-数据库结构"><a href="#2-数据库结构" class="headerlink" title="2.数据库结构"></a>2.数据库结构</h3><p>数据库结构如下</p><table><thead><tr><th>结构</th><th>作用</th></tr></thead><tbody><tr><td>服务端</td><td>服务端是为客户端服务的，服务的内容诸如向客户端提供资源，保存客户端数据。访问的服务器（中间件）</td></tr><tr><td>客户端</td><td>客户端（Client）或称为用户端，是指与服务器相对应，为客户提供本地服务的程序。</td></tr><tr><td>库</td><td>一堆表组的数据的集合</td></tr><tr><td>表</td><td>类似Excel,由行和列组成</td></tr><tr><td>字段</td><td>表的列 （代表需要的是什么数据）</td></tr><tr><td>记录</td><td>表的行 （填写的数据）</td></tr></tbody></table><h3 id="3-SQL语句"><a href="#3-SQL语句" class="headerlink" title="3.SQL语句"></a>3.SQL语句</h3><p>SQL语句由关键字，表明，和列名等组合而成的一条语句</p><h4 id="1-DDL（数据定义语言）："><a href="#1-DDL（数据定义语言）：" class="headerlink" title="1.DDL（数据定义语言）："></a>1.DDL（数据定义语言）：</h4><p>创建，删除或者修改数据库以及数据库中的表等对象</p><table><thead><tr><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>CREATE</td><td>创建数据库和表等</td></tr><tr><td>DROP</td><td>删除数据库和表等</td></tr><tr><td>ALTER</td><td>修改数据库和表等</td></tr></tbody></table><h4 id="2-DML（数据操作语言）"><a href="#2-DML（数据操作语言）" class="headerlink" title="2.DML（数据操作语言）"></a>2.DML（数据操作语言）</h4><p>查询或者修改表中的数据</p><table><thead><tr><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>SELECT</td><td>查询表中数据</td></tr><tr><td>INSERT</td><td>向表中插入数据</td></tr><tr><td>UPDATE</td><td>更新表中数据</td></tr><tr><td>DELETE</td><td>删除表中数据</td></tr></tbody></table><h4 id="3-DCL（数据控制语言）"><a href="#3-DCL（数据控制语言）" class="headerlink" title="3.DCL（数据控制语言）"></a>3.DCL（数据控制语言）</h4><p>确认或取消对数据库中数据变更的操作，以及对数据库权限的设定</p><h3 id="3-基本SQL语法"><a href="#3-基本SQL语法" class="headerlink" title="3.基本SQL语法"></a>3.基本SQL语法</h3><h4 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1.数据库操作"></a>1.数据库操作</h4><pre class=" language-mysql"><code class="language-mysql">carete database db_name(数据库名字);           新建数据库show databases;                                查看所有数据库drop database db_name(要删除的数据库名字);      删除数据库    use db_name(将要进入的数据库);                   进入数据库                </code></pre><ol><li><p>create database fun;</p></li><li><p>show databases;</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/1.png" alt="创建与查看"></p><ol start="3"><li>drop database fun;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/2.png" alt="删除成功"></p><ol start="4"><li>use fun;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/3.png" alt="进入库"></p><p>进入了库，接下来就是表的操作了</p><h4 id="2-表的操作"><a href="#2-表的操作" class="headerlink" title="2.表的操作"></a>2.表的操作</h4><pre class=" language-mysql"><code class="language-mysql">create table table_name(表名);                            创建空表create table table_name(字段名 字段类型)                     创建含有字段的表create table table_name(字段名 字段类型,字段名 字段类型)      创建含有多个字段的表show tables;                                             查看所有的表drop table table_name(表名);                                删除表desc table_name;                                         查看具体表的类型alter table table_name drop 字段名;                       删除表中的字段alter table table_name add 字段名 字段类型;                 添加字段与字段类型到表中 alte table table_name change 字段名 要修改成的字段名 修改类型;    修改表中为‘字段名’的字段名与类型</code></pre><ol><li><p>create table fun(id int(10),name varchar(20));       建表</p></li><li><p>show tables;                                                                看表</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/4.png" alt="创建与产看表"></p><ol start="3"><li>desc fun;                                                                    显示表属性</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/5.png" alt="查看表的类型"></p><ol start="4"><li>drop table fun;                                                        删除表</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/6.png" alt="删除表"></p><ol start="5"><li>alter table fun drop name;                                    删除表中字段</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/7.png" alt="删除表中的字段"></p><ol start="6"><li>alter table fun add name varchar(20);              向表中增加字段</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/8.png" alt="增加字段与字段类型到表中"></p><ol start="7"><li>alter table fun change name stname varchar(10);   改变表中字段名与类型</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/9.png" alt="修改name的字段名与类型"></p><ol start="8"><li>create table student(id int(10) primary key auto_increment not null,name varchar(20));</li></ol><p>创建student表，并创建字段id类型为int,为主键，自增，不为空，创建字段name,类型为varchar</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/10.png" alt="创建与查看"></p><h4 id="3-数据操作"><a href="#3-数据操作" class="headerlink" title="3.数据操作"></a>3.数据操作</h4><pre class=" language-mysql"><code class="language-mysql">insert into 表名 values ('插入数据','插入数据');   //再编程中''中代表字符串  直接将数据依次插入insert into 表名(字段，字段) values ('插入数据','插入数据');                将数据对应字段插入insert into 表名(字段，字段) values ('插入数据','插入数据'),('插入数据','插入数据'),..............;                                                  同时插入多个数据select * from 表名                                                    查询表中所有数据update 表名 set(意味指定) 表名=数据,.....[where 字段='数据'];              更新数据 delete from 表名 where 字段='数据';                                      删除表中满足条件数据select database();                                                      查询当前库名</code></pre><ol><li><p>将数据依次插入：insert into student values (1,’liubei’);  </p><p>查询所有数据(*  在这代表 表中所有的字段)：select * from student;                            </p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/11.png" alt="插入与查询"></p><ol start="2"><li>对应字段插入： insert into student(id,name) values (2,’guangyu’);    </li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/12.png" alt="对应插入"></p><ol start="3"><li>查询name字段在student表中的全部数据:：select name from student;                    </li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/13.png" alt="查找name"></p><ol start="4"><li>更新id=2的name值为zhangfei： update student set name=’zhangfei’ where id=2;   </li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/14.png" alt="更新数据"></p><ol start="5"><li>删除表中name=’caocao’的数据： delete from student where name=’caocao’;       </li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/15.png" alt="删除"></p><ol start="6"><li>返回当前库名：select database();</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/16.png" alt="返回库名"></p><h4 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a>4.注意点</h4><ol><li><p>所有语句以英文分号结尾<code>;</code></p></li><li><p>数据库不可重名</p></li><li><p>注意中英文区别，一般来说：<code>所有的标点</code>都是<code>英文</code>的！！！！</p></li><li><p>数据类型： </p><p>​    varchar(255)–字符串类型（最大长度为255）  </p><p>​    int(20)–整数类型（最大长度为20） </p><p>​    char–字符串类型（长度固定）  </p><p>​    float–浮点类型（小数）  </p></li><li><p>字段也具有一些属性：</p><p>​    <code>主键</code>：primary key(不能为空且唯一)</p><p>​    <code>自增长</code>：auto_increment</p></li><li><p>and–和，or–或，where是一个条件语句</p></li><li><p>数据库可以存储16进制数据，当无法使用’’插入数据，则可以转换成16进制</p><p>转换完成后需要在数据前面添加 0x数据，<code>0X</code>代表告诉是16进制</p></li><li><p>select database():查询库名</p></li><li><p>有几个字段就插入几个字段的数据，不可超过</p></li></ol><h1 id="2-高级查询与子查询"><a href="#2-高级查询与子查询" class="headerlink" title="2.高级查询与子查询"></a>2.高级查询与子查询</h1><h3 id="1-Mysql基础查询语法"><a href="#1-Mysql基础查询语法" class="headerlink" title="1.Mysql基础查询语法"></a>1.Mysql基础查询语法</h3><h4 id="1-order-by-排序"><a href="#1-order-by-排序" class="headerlink" title="1.order by(排序)"></a>1.order by(排序)</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>order by 字段名 [asc(默认)/desc]      acs升序，dasc降序  【不知道字段名时 改成数字】</td><td>字段数据排序</td></tr></tbody></table><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>将id排序：select * from student order by id;      【知道字段情况下的排序】</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/17.png" alt="升序(默认)"></p><ol start="2"><li>默认为升序排序：select * from student order by id asc;  （asc代表升序，dasc代表降序）【知道字段情况下的排序】</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/18.png" alt="升序"></p><ol start="3"><li>不知道字段情况下的排序：</li></ol><p>将第一个字段升序排序：select * from student order by 1 asc;</p><p>将第二个字段升序排序：select * from student order by 2 asc;</p><p>通过数字来代表第几个字段</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/19.png" alt="数字排序"></p><h4 id="2-limit-分页"><a href="#2-limit-分页" class="headerlink" title="2.limit(分页)"></a>2.limit(分页)</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>limit n,m（从第n行开始输出，输出m行）(n起始为：0)</td><td>分页</td></tr></tbody></table><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h4><ol><li>从第（0+1）个数据开始输出（3）行：select * from student limit 0,3;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/20.png" alt="分页查询"></p><ol start="2"><li>从第（3+1）个数据开始输出（3）行：select * from student limit 3,3;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/21.png" alt="分页查询"></p><h4 id="3-like-模糊查询"><a href="#3-like-模糊查询" class="headerlink" title="3.like(模糊查询)"></a>3.like(模糊查询)</h4><table><thead><tr><th>命令（%等于任意字符）</th><th>作用</th></tr></thead><tbody><tr><td>字段名 like ‘数据’</td><td>这时候like就相当于‘=’，此时查询的为     字段名=‘数据’</td></tr><tr><td>字段名 like ‘%a%’</td><td>此时查询的是这个字段中有 <code>a</code> 的全部数据</td></tr><tr><td>字段名 like ‘a%’</td><td>查询字段中以<code>a</code>开头的全部数据</td></tr><tr><td>字段名 like ‘%a’</td><td>查询字段中以<code>a</code>结尾的全部数据</td></tr></tbody></table><h4 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h4><ol><li>查询student表中，name字段中包含<code>a</code>的所有数据：select * from student where <code>name like &#39;%a%&#39;</code>;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/22.png" alt="a数据"></p><ol start="2"><li>查询student表中，name字段中以<code>a</code>开头的所有数据：select * from student where <code>name like &#39;a%&#39;</code>;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/23.png" alt="a开头数据"></p><ol start="3"><li>查询student表中，name字段中以<code>a</code>结尾的所有数据：select * from student where <code>name like &#39;%a&#39;</code>;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/24.png" alt="a结尾的数据"></p><h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>not（!）(括号里为快捷方式)  （!!!代表真）</td><td>非</td></tr><tr><td>and（&amp;&amp;） (括号里为快捷方式)</td><td>和 (多个条件同时成立时才会有结果)</td></tr><tr><td>or（||）(括号里为快捷方式)</td><td>或(一个条件成立时就会有结果)</td></tr></tbody></table><h4 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h4><ol><li>字段<code>name</code>满足<code>caocao</code>和<code>liubei</code>其中一个条件时返回结果：select * from student where name=’caocao’ or name=’liubei’;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/25.png" alt="or"></p><ol start="2"><li>运算符运算</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/26.png" alt="运算"></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>sleep(时间（/s）)    （返回的时一个假的：0）</td><td>延迟执行</td></tr><tr><td>and</td><td>执行是有选择的</td></tr></tbody></table><h3 id="2-联合查询"><a href="#2-联合查询" class="headerlink" title="2.联合查询"></a>2.联合查询</h3><p>联合多表查询</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>union</td><td>用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。(条件：字段数相同)</td></tr></tbody></table><pre class=" language-mysql"><code class="language-mysql">unino使用：select expression1, expression2, ... expression_nfrom tables[where conditions]union [all | distinct]       【all】不过滤重复数据select expression1, expression2, ... expression_nfrom tables[where conditions];</code></pre><p>联合查询 ：</p><ol><li>select * from student where name=’liubei’;</li><li>select * from student where name like ‘%c%’;</li></ol><p>联合后：</p><p>select * from student where name=’liubei’ union select * from student where name like ‘%c%’;</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/27.png" alt="联合查询"></p><h3 id="3-子查询"><a href="#3-子查询" class="headerlink" title="3.子查询"></a>3.子查询</h3><p>查询中嵌套了查询，嵌套的查询为子查询：<code>子查询</code>优先执行</p><pre class=" language-mysql"><code class="language-mysql">select expression1, expression2, ... expression_nfrom tableswhere conditionsin(select expression1, expression2, ... expression_nfrom tables[where conditions]);</code></pre><h3 id="4-渗透测试常用函数"><a href="#4-渗透测试常用函数" class="headerlink" title="4.渗透测试常用函数"></a>4.渗透测试常用函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>group_concat()</td><td>返回由属于一组的列值连接组合而成的结果</td></tr><tr><td>database()</td><td>返回当前数据库名</td></tr><tr><td>user()/system_user()</td><td>返回当前登录的用户名</td></tr><tr><td>version()</td><td>返回mysql服务器的版本</td></tr><tr><td>sleep(n)</td><td>休眠n秒</td></tr></tbody></table><ol><li>结果组合：select group_concat(name) from student;</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/28.png" alt="将同列的结果一同输出"></p><ol start="2"><li>select database()；                返回数据库名</li><li>select user();                            返回当前数据库用户</li><li>select system_user();             返回系统用户</li><li>select version();                       返回mysql版本</li><li>select sleep(2);                        休眠2秒</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592552042/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/SQL/29.png" alt="函数操作"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1前端基础</title>
      <link href="/2020/06/18/2-1-qian-duan-ji-chu/"/>
      <url>/2020/06/18/2-1-qian-duan-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>前端基础</p></blockquote><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="1-前端是什么"><a href="#1-前端是什么" class="headerlink" title="1.前端是什么"></a>1.前端是什么</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h3><ul><li><p>前端–就是我们看到的页面</p></li><li><p>这个页面由前端代码编写(来美观页面)</p></li><li><p>前端代码包括：html,css,js</p></li></ul><table><thead><tr><th align="center">前端语言</th><th align="center">作用</th><th align="center">官方介绍</th></tr></thead><tbody><tr><td align="center">HTML</td><td align="center">用来创建网页的框架</td><td align="center">超文本标记语言（英語：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</td></tr><tr><td align="center">CSS</td><td align="center">用来美化网页</td><td align="center">层叠样式表 (英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。</td></tr><tr><td align="center">Javascript(JS)</td><td align="center">用来实现网页功能</td><td align="center">JavaScript是一种属于网络的高级脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果</td></tr></tbody></table><h3 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2.HTML"></a>2.HTML</h3><p>HTML标签是成对出现的，如:<code>&lt;html&gt;&lt;/html&gt;</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>                        声明为h5            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>                                html开始标签    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>                            头部开始标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        设置编码格式        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>前端基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>          显示网页标题    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>                             头部结束代码    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>                             网站内容开始标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                         标题标签            前端基础知识        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                             段落标签            1.基础知识        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>                            网站内容结束标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>                                html结束标签</code></pre><h3 id="3-JS"><a href="#3-JS" class="headerlink" title="3.JS"></a>3.JS</h3><ol><li><p>HTML 中的脚本必须位于 <code>&lt;script&gt;</code>与 <code>&lt;/script&gt;</code>标签之间。</p></li><li><p>脚本可被放置在 HTML 页面的 <code>&lt;body&gt;</code>和 <code>&lt;head&gt;</code>部分中。</p></li><li><p>js核心就是操作电脑去实现一系列的功能</p></li></ol><p>js代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我的第一个 JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>可以通过禁用JS找漏洞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试-信息收集</title>
      <link href="/2020/06/18/shen-tou-ce-shi-xin-xi-shou-ji/"/>
      <url>/2020/06/18/shen-tou-ce-shi-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>信息收集 – 灵魂</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ol><li><p>通过子站找漏洞</p></li><li><p>通过端口找漏洞</p></li><li><p>通过源码找漏洞</p></li></ol><p>信息收集-子站</p><p>主站–大门：防守严密</p><p>子站–小门：防护比较薄弱</p><p>端口–窗户/下水道</p><p>端口–服务</p><p>21–ftp(上传文件，需要账号密码)</p><p>22-ssh(控制类服务，需要账号密码)</p><p>3389–默认远程桌面连接端口</p><p>6379–服务器端口（存在漏洞 redis未授权访问）</p><p>8009–tomcat端口（ 幽灵猫 ajp漏洞）</p><p>在线端口扫描fofa</p><p>后台–暗门：site:xx.com admin</p><p>使用谷歌语法</p><p>御剑后台扫面</p><p>cms–设计图</p><ul><li><p>认怂报平安，狗命要紧</p></li><li><p>gov 金融 医疗等千万别碰</p></li></ul><p>谷歌语法：</p><ol><li>inurl:域名（查找域名子站，收集子域名）</li></ol><p>端口扫描：</p><p>​    nmap</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1Web服务器通信原理</title>
      <link href="/2020/06/17/1-1web-fu-wu-qi-tong-xin-yuan-li/"/>
      <url>/2020/06/17/1-1web-fu-wu-qi-tong-xin-yuan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>Web服务器通信原理</p></blockquote><h1 id="Web服务器通信原理"><a href="#Web服务器通信原理" class="headerlink" title="Web服务器通信原理"></a>Web服务器通信原理</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><h3 id="1-三大服务器操作系统"><a href="#1-三大服务器操作系统" class="headerlink" title="1.三大服务器操作系统"></a>1.三大服务器操作系统</h3><p>(服务器 =&gt; 一台24小时不停歇的电脑)</p><ul><li>Linux  (Centos  Debian  Ubuntu) (开源) </li><li>Windows Server </li><li>MacOs Server</li></ul><p>一般使用Windows与Linux来当作服务器</p><p>Windows使用的是盘符路径，Linux则使用的为/</p><h3 id="2-cmd命令"><a href="#2-cmd命令" class="headerlink" title="2.cmd命令"></a>2.cmd命令</h3><ul><li>windows开启cmd: windows键+R</li></ul><p><img src="https://res.cloudinary.com/valent/image/upload/v1592470763/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/1.png" alt="cmd"></p><ol><li>dir: 列出当前目录下的文件</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592470763/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/2.png" alt="dir命令"></p><ol start="2"><li>cd: 切换目录</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592470763/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/3.png" alt="cd"></p><ol start="3"><li>Tab: 自动补全</li></ol><h3 id="3-路径"><a href="#3-路径" class="headerlink" title="3.路径"></a>3.路径</h3><h4 id="1-绝对路径"><a href="#1-绝对路径" class="headerlink" title="1.绝对路径"></a>1.绝对路径</h4><p>该文件在系统中完整的存放路径，如：</p><pre class=" language-例子"><code class="language-例子">steam.exe 的绝对路径D:\GameApp\Steam\steam.exe</code></pre><h4 id="2-相对路径"><a href="#2-相对路径" class="headerlink" title="2.相对路径"></a>2.相对路径</h4><p>相对与当前目录的路径，如：</p><pre class=" language-例子"><code class="language-例子">当前路径为 D:\GameApp\Steam，则要查找的steam.exe相对路径为（相对于当前路径的路径）.\steam.exe   (这里.就相当于D:\GameApp\Steam)</code></pre><h3 id="4-IP"><a href="#4-IP" class="headerlink" title="4.IP"></a>4.IP</h3><ol><li><p>公网地址都是运营商分配的</p></li><li><p>内网地址是由路由分配的</p></li><li><p>内网地址：</p><p>10.0.0.0~10.255.255.255 </p><p>172.16.0.0~172.31.255.255 </p><p>192.168.0.0~192.168.255.255</p></li><li><p>查看自己内网地址：打开cmd 输入：ipconfig 即可</p></li></ol><h3 id="5-域名"><a href="#5-域名" class="headerlink" title="5.域名"></a>5.域名</h3><table><thead><tr><th>名称</th><th>详细</th></tr></thead><tbody><tr><td>域名</td><td>域名实际上是为了方便记忆所发明的一个字符型标识</td></tr><tr><td>DNS</td><td>将域名转化为ip的一个协议</td></tr><tr><td>端口</td><td>类似进入一个房子有不同的门，这些门就是这些端口，房子就是IP（端口范围0 到65535（2^16-1）,不同服务对应不同的端口）</td></tr></tbody></table><pre class=" language-cmd"><code class="language-cmd">查看端口命令:netstat -an</code></pre><h3 id="6-HTTP协议"><a href="#6-HTTP协议" class="headerlink" title="6.HTTP协议"></a>6.HTTP协议</h3><p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p><p>请求方式：</p><ol><li>Get</li></ol><p>可以看到所传输的数据 =&gt; 传参的内容会出现在地址栏 <code>?</code>代表后面都是get传参 他有长度限制。</p><p>如：</p><pre class=" language-例子"><code class="language-例子">https://www.google.com/search?q=CMD&oq=CMD&aqs=chrome..69i57j35i39l2j0l2j69i60j69i61l2.2127j0j9&sourceid=chrome&ie=UTF-8传递的数据为：q=CMD&oq=CMD&aqs=chrome..69i57j35i39l2j0l2j69i60j69i61l2.2127j0j9&sourceid=chrome&ie=UTF-8</code></pre><ol start="2"><li>Post</li></ol><p>传参的长度没有限制，无法看见传入的数据</p><ol start="3"><li>HTTP通信数据包</li></ol><pre class=" language-例子"><code class="language-例子">GET /?tn=62095104_26_oem_dg HTTP/1.1Host: baidu.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</code></pre><p>GET 是请求方式  HTTP/1.1 是协议版本 </p><p>HOST是访问的域名</p><p>User-Agent传参是传参告诉别人你的浏览器是什么，是什么系统。</p><h3 id="7-网页浏览流程"><a href="#7-网页浏览流程" class="headerlink" title="7.网页浏览流程"></a>7.网页浏览流程</h3><p>1.1.1.1 baidu.com → 网关 →DNS表，vip.qq.com→ IP web服务器</p><p>一、用户在浏览器输入协议://域名，如 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><p>二、用户浏览器通过系统 → 向DNS服务器查询域名对应的IP地址</p><p>三、用户浏览器向查询到的IP地址(Web服务器)发起HTTP请求</p><p>四、服务器分析用户请求，从中提取数据，处理后返回一个http响应</p><p>五、浏览器收到响应后提取状态、协议编码、正文的有效信息，然后翻译成人类能够直观理解的图形界面并显示。</p><h3 id="8-Web容器"><a href="#8-Web容器" class="headerlink" title="8.Web容器"></a>8.Web容器</h3><ul><li><p>Web容器是可以向发出请求的浏览器提供文档的程序。</p></li><li><p>WEB容器是一种被动程序：只有其他计算机发出的请求该容器时，容器才会响应</p></li><li><p>Web容器的主要功能是存储，处理和传递网页给客户。客户端和服务器之间的通信使用超文本传输协议（HTTP）进行。交付的页面最常见的是HTML文档，除了文本内容之外，还可能包含图像，样式表和脚本</p></li><li><p>Web容器就起到一个作用：中间商(一个环境，搭建起一个Web容器即可搭建起一个网站)</p></li><li><p>Web容器存在于 服务器端</p></li></ul><p>常见Web容器：</p><ol><li>IIS (适用Windwos)</li><li>Apache（适用全平台）</li><li>Nginx（适用全平台）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2搭建Web测试环境</title>
      <link href="/2020/06/17/1-2-da-jian-web-ce-shi-huan-jing/"/>
      <url>/2020/06/17/1-2-da-jian-web-ce-shi-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>渗透测试</p><p>搭建Web安全测试环境</p></blockquote><h1 id="搭建Web安全测试环境"><a href="#搭建Web安全测试环境" class="headerlink" title="搭建Web安全测试环境"></a>搭建Web安全测试环境</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><h3 id="1-网站"><a href="#1-网站" class="headerlink" title="1.网站"></a>1.网站</h3><p>需要：</p><ol><li>容器</li><li>数据库(存储数据)</li><li>动态语言 (编程)</li></ol><h4 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h4><ol><li><p><code>动态语言</code>:动态语言是对服务器行为的编程。这被称为<code>服务器端脚本</code>或<code>服务器脚本</code>。(动态语言决定网页该干什么，做什么)</p></li><li><p>只要是动态网站都具备动态语言：实现交互等功能，如搜索等。。</p></li><li><p>纯静态网站：不具备任何功能只能查看，于是不具有动态语言</p></li></ol><table><thead><tr><th align="left">动态语言</th><th>适用平台</th></tr></thead><tbody><tr><td align="left">Asp,Aspx</td><td>Windows</td></tr><tr><td align="left">PHP</td><td>全平台</td></tr><tr><td align="left">JSP</td><td>全平台</td></tr><tr><td align="left">python</td><td>全平台</td></tr></tbody></table><ol start="4"><li>访问的网站，相当于当问服务器上的文件！！！</li></ol><h3 id="2-Web容器解析"><a href="#2-Web容器解析" class="headerlink" title="2.Web容器解析"></a>2.Web容器解析</h3><p>通过文件后缀来判断是什么东西</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592470763/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/4.png" alt="解析"></p><h2 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h2><h3 id="1-常见快速搭建软件"><a href="#1-常见快速搭建软件" class="headerlink" title="1.常见快速搭建软件"></a>1.常见快速搭建软件</h3><table><thead><tr><th>软件（语言）</th><th>使用平台</th></tr></thead><tbody><tr><td>phpstudy（php）</td><td>全平台</td></tr><tr><td>Tomcat （jsp）</td><td>全平台</td></tr><tr><td>lnmp （php）</td><td>linux</td></tr></tbody></table><h3 id="2-模板搭建"><a href="#2-模板搭建" class="headerlink" title="2.模板搭建"></a>2.模板搭建</h3><p>CMS”内容管理系统”,实际上就是一个快速建站的模板，常见的CMS有织梦、Dz论坛等</p><p>在网上搜索想要的模板，然后将源码下载，复制到站点目录，再浏览器中访问安装</p><p>搭建步骤：</p><p>(环境Win2008 )</p><ol><li><p>官网下载，安装<a href="https://www.xp.cn/download.html" target="_blank" rel="noopener">phpstudy</a>，或者下载我提供的<a href="https://valent.lanzous.com/iVshudrw70j" target="_blank" rel="noopener">phpstudy2018</a></p></li><li><p>推荐使用phpstudy2018</p></li><li><p>安装完成时提示缺少vc多少,则下载<a href="https://valent.lanzous.com/b015jei6j" target="_blank" rel="noopener">VC</a>  密码:h19j</p></li><li><p>环境就基本搭建好了</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592470763/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/5.png" alt="OK"></p></li><li><p>当phpstudy启动成功过后几秒又失败了，可能是没有使用管理员权限运行，使用即可，再不行就重新安装。</p></li></ol><ol start="6"><li>下载需要的网站模板，可以去官方下载也可以去一些源码交流论坛，比如A5什么的~还可以去github 码云 下载</li></ol><ol start="7"><li>下载cms源码，新建站点，移入站点，通过浏览器来访问，安装</li></ol><h3 id="3-知识点"><a href="#3-知识点" class="headerlink" title="3.知识点"></a>3.知识点</h3><ol><li><p>当访问一个网站可以查看到目录时不安全，则</p></li><li><p>一台服务器可以搭建多个网站：</p><p>1）通过更改端口，搭建多个网站</p></li><li><p>网站分为：</p><p>1）前台（用户部分）</p><p>2）后台（管理部分）</p></li></ol><p>磁盘</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域</title>
      <link href="/2020/06/16/yu/"/>
      <url>/2020/06/16/yu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网安学习</p><p>域-Domain</p></blockquote><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h3><p>域代表了一个环境</p><h4 id="1-内网环境"><a href="#1-内网环境" class="headerlink" title="1.内网环境"></a>1.内网环境</h4><hr><p>​    1）工作中：默认模式，人人平等（需要得到同意才可以控制）</p><p>​    2）域：人人不平等，集中管理，统一管理（可随时控制你）</p><h4 id="2-域特点"><a href="#2-域特点" class="headerlink" title="2.域特点"></a>2.域特点</h4><hr><p>​    集中/统一管理（不平等）</p><h4 id="3-域的组成"><a href="#3-域的组成" class="headerlink" title="3.域的组成"></a>3.域的组成</h4><hr><p>​    1）域控制器（服务器）：DC（Domain Controller）</p><p>​    2）成员机</p><h4 id="4-域的部署"><a href="#4-域的部署" class="headerlink" title="4.域的部署"></a>4.域的部署</h4><hr>1. 安装域控制器--即可生成域环境2. 安装了活动目录--就生成了域控制器<ol start="3"><li>活动目录：Active Directory =AD</li></ol><h4 id="5-活动目录"><a href="#5-活动目录" class="headerlink" title="5.活动目录"></a>5.活动目录</h4><hr><ol><li>AD</li><li>特点：集中管理/统一管理</li></ol><h4 id="6-组策略GPO"><a href="#6-组策略GPO" class="headerlink" title="6.组策略GPO"></a>6.组策略GPO</h4><h4 id="7-部署安装活动目录"><a href="#7-部署安装活动目录" class="headerlink" title="7.部署安装活动目录"></a>7.部署安装活动目录</h4><hr><ol><li>开启2008虚拟机，并桥接到VM2</li><li></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IIS服务器</title>
      <link href="/2020/06/14/iis-fu-wu-qi/"/>
      <url>/2020/06/14/iis-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网安学习</p><p>IIS-Web服务器</p><p>IIS-FTP服务器</p></blockquote><a id="more"></a><h2 id="1-IIS-Web服务器"><a href="#1-IIS-Web服务器" class="headerlink" title="1.IIS-Web服务器"></a>1.IIS-Web服务器</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h3><ol><li><p><code>Web服务器</code>也就是<code>网页服务器</code>,或者<code>HTTP服务器</code>（Web服务器使用的协议为HTTP或者HTTPS）</p></li><li><p>HTTP协议的端口号：TCP 80</p></li><li><p>HTTPS协议的端口号：TCP 443</p></li><li><p>Web服务器发布软件：</p><p>以下适合生产：</p><hr><ul><li><p>微软：IIS(可以发布web网站和FTP站点)</p></li><li><p>Linux: Apache/LAMP/Tomcat/nginx .etc</p></li></ul><hr><p>以下一般适合生产完进行测试：</p><hr><ul><li>第三方：phpstudy ,XAMPP</li></ul></li></ol><h3 id="2-部署Web服务器"><a href="#2-部署Web服务器" class="headerlink" title="2. 部署Web服务器"></a>2. 部署Web服务器</h3><p>   (操作环境：Win2003)</p><h4 id="2-1-配置静态IP地址"><a href="#2-1-配置静态IP地址" class="headerlink" title="2.1 配置静态IP地址"></a>2.1 配置静态IP地址</h4><p>   手动设置IP 设置为 10.1.1.1(255.255.255.0)</p><h4 id="2-2-安装IIS"><a href="#2-2-安装IIS" class="headerlink" title="2.2 安装IIS"></a>2.2 安装IIS</h4><ol><li>安装可选Windows组件-&gt;2.应用程序服务器（双击）-&gt;3.IIS（双击）</li></ol><ul><li><input checked="" disabled="" type="checkbox"> <p>万维网络服务（Web服务）</p></li><li><input checked="" disabled="" type="checkbox"> <p>文件传输协议服务（FTP服务）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/1.png" alt="安装IIS"></p></li></ul><ol start="2"><li><p>出现如下时</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/2.png" alt="所需文件"></p><p>将D盘改为E盘</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/3.png" alt="修改"></p></li><li><p>安装完成</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/4.png" alt="完成"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/5.png" alt="查看端口"></p></li></ol><h4 id="2-3-访问测试"><a href="#2-3-访问测试" class="headerlink" title="2.3 访问测试"></a>2.3 访问测试</h4><ol><li><p>XP打开浏览器，输入 10.1.1.1（配置的静态IP） 进行访问</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/6.png" alt="访问"></p><p>显示的只是该<code>站点</code>的<code>默认网站</code> (多个网页组成一个网站)</p></li></ol><h4 id="2-4-网站存放路径"><a href="#2-4-网站存放路径" class="headerlink" title="2.4 网站存放路径"></a>2.4 网站存放路径</h4><ol><li><p>右键默认网站-&gt;2.主目录-&gt;3.本地路径（网站存放路径，可更改）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/7.png" alt="存放路径"></p></li></ol><h3 id="3-网站部署"><a href="#3-网站部署" class="headerlink" title="3. 网站部署"></a>3. 网站部署</h3><h4 id="3-1-新建网站"><a href="#3-1-新建网站" class="headerlink" title="3.1 新建网站"></a>3.1 新建网站</h4>   <hr><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/8.png" alt="新建"></p><ul><li><p>1.网站描述(自定义网站名)</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/9.png" alt="描述"></p></li><li><p>2.分配IP</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/10.png" alt="网站IP"></p></li><li><p>3.网站目录(使用匿名访问)</p><p>自定义网站存放目录，或者输入存放网页的目录</p></li><li><p>4.网站访问权限（自定义）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/11.png" alt="权限"></p></li><li><p>完成</p></li></ul><h4 id="3-2-测试"><a href="#3-2-测试" class="headerlink" title="3.2 测试"></a>3.2 测试</h4>   <hr><ul><li><p>1.显示无权访问(可能是首页不存在)</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/12.png" alt="失败"></p></li><li><p>2.缺少默认首页，去IIS添加，设置默认文档（设置首页），并上移置顶（最高优先级）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/13.png" alt="添加首页"></p></li><li><p>3.测试OK</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/14.png" alt="ok"></p></li></ul><h3 id="4-IIS部署多个网站"><a href="#4-IIS部署多个网站" class="headerlink" title="4.IIS部署多个网站"></a>4.IIS部署多个网站</h3><ul><li><p>多个网站不能使用同一个IP</p><p>解决方法：</p><h4 id="方法一：-增加网卡-添加IP地址-（仅限做测试）"><a href="#方法一：-增加网卡-添加IP地址-（仅限做测试）" class="headerlink" title="方法一：(增加网卡)添加IP地址  （仅限做测试）"></a>方法一：(增加网卡)添加IP地址  （<code>仅限做测试</code>）</h4></li><li><p>1.添加IP</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/15.png" alt="添加IP"></p></li><li><p>2.分配IP</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/16.png" alt="分配IP"></p></li><li><p>3.添加站点目录</p></li><li><p>4.进行访问测试 输入 10.1.1.2（如无法访问，查看首页是否添加到内容页）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/17.png" alt="ok"></p></li></ul><h4 id="方法二：相同IP更改端口号-（仅限做测试）"><a href="#方法二：相同IP更改端口号-（仅限做测试）" class="headerlink" title="方法二：相同IP更改端口号  （仅限做测试）"></a>方法二：相同IP更改端口号  （<code>仅限做测试</code>）</h4><ul><li><p>1.相同IP通过修改端口号来访问不同网站</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/18.png" alt="修改端口号"></p></li><li><p>2.测试</p><p>通过访问 ip:端口号 来访问网站  如： 10.1.1.1:8080</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/19.png" alt="测试"></p></li></ul><h4 id="方法三：IP-端口号相同，绑定不同域名"><a href="#方法三：IP-端口号相同，绑定不同域名" class="headerlink" title="方法三：IP 端口号相同，绑定不同域名"></a>方法三：IP 端口号相同，绑定不同域名</h4><ul><li><p>1.安装DNS</p></li><li><p>2.新建网站区域</p></li><li><p>3.分别创建主机名，主机WWW，IP 10.1.1.1</p></li><li><p>4.IIS设置<code>主机头值</code>（域名）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/20.png" alt="主机头值"></p></li><li><p>5.通过域名来访问即可 如： <a href="http://www.flower.com" target="_blank" rel="noopener">www.flower.com</a>   <a href="http://www.VIP.com" target="_blank" rel="noopener">www.VIP.com</a></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592149652/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/IIS-Web/21.png" alt="域名访问"></p></li></ul><h2 id="2-IIS-FTP服务器"><a href="#2-IIS-FTP服务器" class="headerlink" title="2. IIS-FTP服务器"></a>2. IIS-FTP服务器</h2><h3 id="1-基础知识-1"><a href="#1-基础知识-1" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h3><ol><li>FTP端口号：TCP 20/21</li></ol><ol start="2"><li>File Transfor Protocol  文件传输协议</li></ol><ol start="3"><li><p>FTP工作模式：</p><p>1）主动模式</p><p>​    21端口：控制端口</p><p>​    20端口：数据端口</p><p>2）被动模式</p><p>​    21端口+随机端口作为数据传输端口</p></li><li><p>用户最终权限为FTP权限为NTFS权限交际</p></li><li><p>建议FTP权限全部勾选，然后在具体的NTFS里面设置文件权限</p></li></ol><h3 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h3><ol><li><p>同上述Web服务器一同安装了</p><p><img src="" alt="安装完成"></p></li><li><p>随便在FTP中放入文件，然后 s输入：<a href="ftp://ip地址">ftp://ip地址</a>  如：<a href="ftp://10.1.1.1">ftp://10.1.1.1</a> 访问</p><p><img src="" alt="新建文件"></p><p><img src="" alt="访问ok"></p></li><li><p>ok  </p></li></ol><h3 id="3-实验"><a href="#3-实验" class="headerlink" title="3.实验"></a>3.实验</h3><h4 id="1-部署"><a href="#1-部署" class="headerlink" title="1.部署"></a>1.部署</h4><ol><li><p>新建FTP站点</p></li><li><p>绑定IP即可</p><p><img src="" alt="绑定"></p></li><li><p>不隔离用户 ，下一步</p></li><li><p>选择FTP站点目录</p></li><li><p>设置FTP站点访问权限: 具有读取，写入权限</p><p><img src="" alt="权限"></p></li><li><p>完成</p></li><li><p>设置文件夹权限</p></li><li><p>设置作业上传权限</p><p><img src="" alt="取消继承"></p></li><li><p>删除users 用户（不认所有人）</p></li><li><p>添加访问用户与管理员用户</p><p><img src="" alt="添加用户"></p></li><li><p>访问用户权限设置为：写入即可</p></li><li><p>管理员用户设置为：完全控制</p></li><li><p>设置笔记权限</p></li><li><p>直接添加admin：完全控制</p></li><li><p>最后取消匿名访问</p></li></ol><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h4><ol><li><p>XP访问： <a href="ftp://10.1.1.1">ftp://10.1.1.1</a></p></li><li><p>输入用户信息即可访问</p><p><img src="" alt="访问"></p></li><li><p>让后访问，上传等</p></li></ol><h3 id="4-FTP主动模式"><a href="#4-FTP主动模式" class="headerlink" title="4.FTP主动模式"></a>4.FTP主动模式</h3><p>   客户机想要服务器主动，所以主动模式是<code>服务器</code>在主动向客户机拨号，建立连接（数据通道）</p><h3 id="5-FTP被动模式"><a href="#5-FTP被动模式" class="headerlink" title="5.FTP被动模式"></a>5.FTP被动模式</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习打卡</title>
      <link href="/2020/06/12/xue-xi-da-qia/"/>
      <url>/2020/06/12/xue-xi-da-qia/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自学打卡<br>欢迎一起</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DNS部署与安全</title>
      <link href="/2020/06/12/dns-bu-shu-yu-an-quan/"/>
      <url>/2020/06/12/dns-bu-shu-yu-an-quan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网安个人学习</p></blockquote><h2 id="DNS部署与安全"><a href="#DNS部署与安全" class="headerlink" title="DNS部署与安全"></a>DNS部署与安全</h2><h3 id="1-DNS"><a href="#1-DNS" class="headerlink" title="1.DNS"></a>1.DNS</h3><p>Domain Name Services</p><p>域名服务</p><p>作用：为客户机提供域名解析服务器</p><h3 id="2-域名组成"><a href="#2-域名组成" class="headerlink" title="2.域名组成"></a>2.域名组成</h3><h4 id="2-1-域名组成概述"><a href="#2-1-域名组成概述" class="headerlink" title="2.1 域名组成概述"></a>2.1 域名组成概述</h4><p>如”<a href="www.baidu.com"></a>“为一个域名，严格来说：baidu.com”才是一个域名（唯一）,”www”为主机名。</p><p>“主机名.域名”为完全限定域名（FQDN–完全合格的域名）,一个域名可以有多个主机,但是<code>域名</code>则是唯一的,所以”主机名.域名”也是唯一的。</p><pre class=" language-域名"><code class="language-域名">nslookup 主机名.域名(查看IP地址)如： www.baidu.com..为根域.com为顶级域baidu为一级域www为主机名FQDN = 主机名.DNS后缀FQDN （完整合格的域名）</code></pre><h3 id="3-监听端口"><a href="#3-监听端口" class="headerlink" title="3.监听端口"></a>3.监听端口</h3><pre class=" language-端口"><code class="language-端口">TCP53UDP53</code></pre><h3 id="4-DNS解析种类"><a href="#4-DNS解析种类" class="headerlink" title="4.DNS解析种类"></a>4.DNS解析种类</h3><pre class=" language-解析种类"><code class="language-解析种类">1) 递归查询：客户机与本地DNS之间2) 迭代查询：本地DNS服务器与根等其它DNS服务器的解析过程</code></pre><p>迭代解析中，根域绝对不能切断</p><h4 id="4-1-按照查询内容分类"><a href="#4-1-按照查询内容分类" class="headerlink" title="4.1 按照查询内容分类"></a>4.1 按照查询内容分类</h4><p>​    1 ）正向解析：已知域名，解析ip地址</p><p>​    2 ）反向解析：一直IP地址，解析域名</p><h3 id="5-域名解析记录类型"><a href="#5-域名解析记录类型" class="headerlink" title="5.域名解析记录类型"></a>5.域名解析记录类型</h3><ul><li>A记录：正向解析</li><li>CNAME记录：别名</li><li>PTR记录：反向解析记录</li><li>MX：邮箱交换记录</li><li>NS：域名服务器解析</li></ul><h3 id="5-反向DNS"><a href="#5-反向DNS" class="headerlink" title="5.反向DNS"></a>5.反向DNS</h3><p>​    nslookup手工解析时，会解析反向解析</p><h3 id="6-DNS服务器种类"><a href="#6-DNS服务器种类" class="headerlink" title="6.DNS服务器种类"></a>6.DNS服务器种类</h3><ul><li><p>主要名称服务器</p></li><li><p>辅助名称服务器</p></li><li><p>根名称服务器</p></li><li><p>高速缓存服务器</p></li></ul><h3 id="7-客户机域名请求解析的顺序"><a href="#7-客户机域名请求解析的顺序" class="headerlink" title="7.客户机域名请求解析的顺序"></a>7.客户机域名请求解析的顺序</h3><p>DNS解析-&gt;本地hosts文件-&gt;本地DNS服务器</p><h3 id="8-服务器对于域名的处理顺序"><a href="#8-服务器对于域名的处理顺序" class="headerlink" title="8.服务器对于域名的处理顺序"></a>8.服务器对于域名的处理顺序</h3><p>DNS高速缓存-&gt;本地区域缓存文件-&gt;转发器-&gt;根</p><h3 id="主要命令"><a href="#主要命令" class="headerlink" title="主要命令"></a>主要命令</h3><pre class=" language-cmd"><code class="language-cmd">ipconfigipconfig /allipconfig /releaseipconfig /renewipconfig /displaydnsipconfig /flushdns</code></pre><hr><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><p>DNS搭建与解析</p><h4 id="1-首先固定IP"><a href="#1-首先固定IP" class="headerlink" title="1. 首先固定IP"></a>1. 首先固定IP</h4><h4 id="2-安装DNS组件"><a href="#2-安装DNS组件" class="headerlink" title="2. 安装DNS组件"></a>2. 安装DNS组件</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/1.png" alt="DNS组件"></p><h4 id="3-Windows组件安装-gt-双击网络服务-gt-域名系统（DNS）勾选，下一步-完成"><a href="#3-Windows组件安装-gt-双击网络服务-gt-域名系统（DNS）勾选，下一步-完成" class="headerlink" title="3. Windows组件安装-&gt;双击网络服务-&gt;域名系统（DNS）勾选，下一步 完成"></a>3. Windows组件安装-&gt;双击网络服务-&gt;域名系统（DNS）勾选，下一步 完成</h4><h4 id="4-弹出如下："><a href="#4-弹出如下：" class="headerlink" title="4. 弹出如下："></a>4. 弹出如下：</h4><p>将D盘改为E盘</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/2.png" alt="所需文件"></p><h4 id="5-修改为如下："><a href="#5-修改为如下：" class="headerlink" title="5. 修改为如下："></a>5. 修改为如下：</h4><p>修改两次，之后确定</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/3.png" alt="修改"></p><h4 id="6-安装完成"><a href="#6-安装完成" class="headerlink" title="6. 安装完成"></a>6. 安装完成</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/4.png" alt="DNS安装完成"></p><h4 id="7-端口：UDP53出现（已经成功配置DNS服务器）"><a href="#7-端口：UDP53出现（已经成功配置DNS服务器）" class="headerlink" title="7. 端口：UDP53出现（已经成功配置DNS服务器）"></a>7. 端口：UDP53出现（已经成功配置DNS服务器）</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/5.png" alt="UDP53"></p><pre class=" language-注意"><code class="language-注意">1.当前这个DNS服务器只是安装完成，并未进行任何操作，只是打开服务2.刚搭建DNS服务器无缓存3.只要搭建好就已经形成了完整的DNS服务器--缓存服务器（什么都不放）</code></pre><h4 id="8-新建正向查找区域-gt-主要区域-主服务器与备份服务器-gt-区域名称-gt-区域文件-gt-动态更新（学AD才用到，现在保持不变）"><a href="#8-新建正向查找区域-gt-主要区域-主服务器与备份服务器-gt-区域名称-gt-区域文件-gt-动态更新（学AD才用到，现在保持不变）" class="headerlink" title="8. 新建正向查找区域-&gt;主要区域(主服务器与备份服务器)-&gt;区域名称-&gt;区域文件-&gt;动态更新（学AD才用到，现在保持不变）"></a>8. 新建正向查找区域-&gt;主要区域(主服务器与备份服务器)-&gt;区域名称-&gt;区域文件-&gt;动态更新（学AD才用到，现在保持不变）</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/6.png" alt="新建区域"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/7.png" alt="主要区域"></p><p>就是告诉别人，这才是权威区域！</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/8.png" alt="区域名称"></p><p>区域文件：专门用来解析<code>域名</code>结尾的正向解析文件，如：</p><pre class=" language-例子"><code class="language-例子">pan.域名music.域名</code></pre><p>都解析到这个文件里面</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/9.png" alt="区域文件"></p><h4 id="9-新建完成"><a href="#9-新建完成" class="headerlink" title="9. 新建完成"></a>9. 新建完成</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/10.png" alt="创建完成"></p><h4 id="10-权威服务器SOA-起始授权机构-，全球唯一的"><a href="#10-权威服务器SOA-起始授权机构-，全球唯一的" class="headerlink" title="10. 权威服务器SOA(起始授权机构)，全球唯一的"></a>10. <code>权威服务器SOA</code>(起始授权机构)，全球唯一的</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/11.png" alt="SOA"></p><h4 id="11-名称服务器-NS-负责该域名解析的服务器"><a href="#11-名称服务器-NS-负责该域名解析的服务器" class="headerlink" title="11. 名称服务器(NS)`:负责该域名解析的服务器"></a>11. 名称服务器(NS)`:负责该域名解析的服务器</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/12.png" alt="NS"></p><h4 id="12-右键-gt-新建主机（用来解析）"><a href="#12-右键-gt-新建主机（用来解析）" class="headerlink" title="12. 右键-&gt;新建主机（用来解析）"></a>12. 右键-&gt;新建主机（用来解析）</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/13.png" alt="解析"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/14.png" alt="主机"></p><h4 id="13-未正常配置"><a href="#13-未正常配置" class="headerlink" title="13. 未正常配置"></a>13. 未正常配置</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/15.png" alt="失败"></p><h4 id="14-手动进行配置，来进行测试"><a href="#14-手动进行配置，来进行测试" class="headerlink" title="14. 手动进行配置，来进行测试"></a>14. 手动进行配置，来进行测试</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/16.png" alt="手动"></p><pre class=" language-测试"><code class="language-测试">nslookup www.baidu.com显示解析地址为我们之前配置的IP</code></pre><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/17.png" alt="解析成功"></p><p>ping测试</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/18.png" alt="PING"></p><p>显示IP说明配置成功，但是不在同一网段，所以无法ping通</p><h4 id="15-清空本地DNS缓存"><a href="#15-清空本地DNS缓存" class="headerlink" title="15. 清空本地DNS缓存"></a>15. 清空本地DNS缓存</h4><p>做测试留下的缓存，如果不清空就无法上午，所以使用完需要刷新</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/19.png" alt="显示缓存"></p><pre class=" language-cmd"><code class="language-cmd">ipconfig /flushdns 清空DNS缓存</code></pre><pre class=" language-cmd"><code class="language-cmd">ipconfig /displaydns显示DNS缓存</code></pre><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/20.png" alt="显示缓存"></p><hr><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><p>反向解析</p><p>Server:Unknown</p><h4 id="1-消除Server-Unknown"><a href="#1-消除Server-Unknown" class="headerlink" title="1. 消除Server:Unknown"></a>1. 消除Server:Unknown</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/21.png" alt="Unknown"></p><p>首先是访问服务器，然后询问它的名字，当访问三次没响应时，进行下一步，访问网址IP</p><h4 id="2-新建主机：dns1"><a href="#2-新建主机：dns1" class="headerlink" title="2. 新建主机：dns1"></a>2. 新建主机：dns1</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/22.png" alt="dns1"></p><p>缺少反向，无法创建</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/23.png" alt="失败"></p><h4 id="3-创建反向查找区域，之后一直下一步，直到完成"><a href="#3-创建反向查找区域，之后一直下一步，直到完成" class="headerlink" title="3. 创建反向查找区域，之后一直下一步，直到完成"></a>3. 创建反向查找区域，之后一直下一步，直到完成</h4><p>主机IP为： 10.1.1.0，所以识别网络填写为：10.1.1._</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/24.png" alt="反向查找区域"></p><h4 id="4-反向查找区域-》新建PTR"><a href="#4-反向查找区域-》新建PTR" class="headerlink" title="4. 反向查找区域-》新建PTR"></a>4. 反向查找区域-》新建PTR</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/25.png" alt="新建"></p><p>将10.1.1.1 解析到 dns1.baidu.com</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/26.png" alt="选择"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/27.png" alt="IP"></p><h4 id="5-进入XP进行测试"><a href="#5-进入XP进行测试" class="headerlink" title="5. 进入XP进行测试"></a>5. 进入XP进行测试</h4><p>显示server: dnsl.baidu.com</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/28.png" alt="测试"></p><hr><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><p>虚拟机上网</p><h4 id="1-确定真实机是有线还是无线"><a href="#1-确定真实机是有线还是无线" class="headerlink" title="1. 确定真实机是有线还是无线"></a>1. 确定真实机是有线还是无线</h4><h4 id="2-编辑-》虚拟网路编辑器-》更改设置"><a href="#2-编辑-》虚拟网路编辑器-》更改设置" class="headerlink" title="2. 编辑-》虚拟网路编辑器-》更改设置"></a>2. 编辑-》虚拟网路编辑器-》更改设置</h4><p>更具情况选择使用</p><p>配置V0</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592064087/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/29.png" alt="桥接"></p><h4 id="3-桥接到V0"><a href="#3-桥接到V0" class="headerlink" title="3. 桥接到V0"></a>3. 桥接到V0</h4><p>此时还不一定能上网</p><h4 id="4-释放地址"><a href="#4-释放地址" class="headerlink" title="4. 释放地址"></a>4. 释放地址</h4><p>全部自动</p><p>然后停用本地连接后，再启动</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/30.png" alt="真实机获取的IP"></p><h4 id="5-可以清空一下缓存"><a href="#5-可以清空一下缓存" class="headerlink" title="5. 可以清空一下缓存"></a>5. 可以清空一下缓存</h4><p>可以清空两次</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/31.png" alt="清空缓存"></p><h4 id="6-进行ping测试"><a href="#6-进行ping测试" class="headerlink" title="6. 进行ping测试"></a>6. 进行ping测试</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/32.png" alt="测试"></p><p>测试成功，可以成功上网</p><hr><h3 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h3><p>DNS备份</p><h4 id="1-配置另一台DNS服务器"><a href="#1-配置另一台DNS服务器" class="headerlink" title="1. 配置另一台DNS服务器"></a>1. 配置另一台DNS服务器</h4><p>安装DNS同实验一</p><p>则此时有 WIN2003-1(主DNS服务器) 与win2003-2(本分服务器)</p><h4 id="2-先在主服务器操作"><a href="#2-先在主服务器操作" class="headerlink" title="2. 先在主服务器操作"></a>2. 先在主服务器操作</h4><p>主要区域服务器</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/33.png" alt="主要区域服务器"></p><p>点击属性</p><h4 id="3-区域复制"><a href="#3-区域复制" class="headerlink" title="3. 区域复制"></a>3. 区域复制</h4><p>添加复制到的服务器,此时复制到10.1.1.2（当前为10.1.1.1）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/34.png" alt="复制"></p><h4 id="4-同步区域"><a href="#4-同步区域" class="headerlink" title="4. 同步区域"></a>4. 同步区域</h4><p>正向查找区域-&gt;新建区域-&gt;辅助区域（用于备份）-&gt;备份名（qq.com）-&gt;备份IP（10.1.1.1）</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/35.png" alt="备份区域"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/36.png" alt="备份IP"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/37.png" alt="备份完成"></p><h4 id="5-完成"><a href="#5-完成" class="headerlink" title="5. 完成"></a>5. 完成</h4><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/38.png" alt="备份完成"></p><hr><h3 id="实验五"><a href="#实验五" class="headerlink" title="实验五"></a>实验五</h3><ul><li>xp模拟客户机 </li><li>Win2003-1模拟公司DNS服务器  </li><li>Win2003-2模拟互联网DNS服务器</li></ul><ol><li><p>Win2003-2创建jd.com</p></li><li><p>新建主机</p><p>2.2.2.2</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/39.png" alt="新建主机"></p></li><li><p>去可客户机解析，发现解析失败</p><p>公司服务器解析失败，则需要转发给别人做（甩锅）</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/40.png" alt="解析失败"></p><ol start="4"><li><p>去公司服务器配置转发器</p><p>甩锅给可以解析的服务器（互联网DNS）</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/41.png" alt="转发器"></p><ol start="5"><li><p>配置成功</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/42.png" alt="成功"></p></li></ol><hr><h3 id="实验六"><a href="#实验六" class="headerlink" title="实验六"></a>实验六</h3><p>设置别名-CNAME（给域名取别名）</p><ol><li><p>域名新建别名</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/43.png" alt="创建别名"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/44.png" alt="别名"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/45.png" alt="创建完成"></p></li><li><p>客户机测试</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1592041129/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DNS/46.png" alt="测试完成"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DHCP部署与安全</title>
      <link href="/2020/06/10/dhcp-bu-shu-yu-an-quan/"/>
      <url>/2020/06/10/dhcp-bu-shu-yu-an-quan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网安个人学习</p></blockquote><h2 id="DHCP部署与安全"><a href="#DHCP部署与安全" class="headerlink" title="DHCP部署与安全"></a>DHCP部署与安全</h2><h3 id="1-DHCP作用"><a href="#1-DHCP作用" class="headerlink" title="1.DHCP作用"></a>1.DHCP作用</h3><p>（Dynamic Host Configure Protocol）自动分配ip</p><h3 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h3><p><code>地址池</code>/<code>作用域</code>：（<code>ip</code>，<code>子网掩码</code>，<code>网关</code>，<code>DNS</code>，<code>租期</code>）,<code>DHCP协议的端口</code>是<code>67/68</code></p><h3 id="3-优点"><a href="#3-优点" class="headerlink" title="3.优点"></a>3.优点</h3><p>减少工作量，避免ip冲突，提高地址利用率</p><h3 id="4-DHCP原理"><a href="#4-DHCP原理" class="headerlink" title="4.DHCP原理"></a>4.DHCP原理</h3><p>也叫做DHCP租约过程，（谁回应先到达，先用哪个），分为四步：</p><h4 id="1-发送DHCP-Discovery（发现）广播包。"><a href="#1-发送DHCP-Discovery（发现）广播包。" class="headerlink" title="1. 发送DHCP Discovery（发现）广播包。"></a>1. 发送<code>DHCP Discovery</code>（发现）广播包。</h4><p>（就像去租房，就需要去问哪有房租）</p><p> 客户机广播请求IP地址（包含客户机的MAC地址）</p><h4 id="2-响应DHCP-Offer广播包"><a href="#2-响应DHCP-Offer广播包" class="headerlink" title="2. 响应DHCP Offer广播包"></a>2. 响应<code>DHCP Offer</code>广播包</h4><p>（收到房东提供的房源信息）（即没有水卡，电卡等，只是告诉地址，去看房）</p><p> 服务器响应提供的IP地址（但无子网掩码，网关等参数）</p><h4 id="3-客户机发送DHCP-Request广播包"><a href="#3-客户机发送DHCP-Request广播包" class="headerlink" title="3. 客户机发送DHCP Request广播包"></a>3. 客户机发送<code>DHCP Request</code>广播包</h4><p>  （对于多个房源进行选择，看需要哪个房）</p><p>  客户机选择IP（也可以认为确定使用哪个IP）</p><h4 id="4-服务器发送DHCP-ACK（确认）广播包"><a href="#4-服务器发送DHCP-ACK（确认）广播包" class="headerlink" title="4. 服务器发送DHCP ACK（确认）广播包"></a>4. 服务器发送<code>DHCP ACK</code>（确认）广播包</h4><p>（房主确定租约，确定住房信息）</p><p>服务器<code>确认租约</code>，并提供网卡详细参数IP，掩码，网关，DNS，租约（提供的从地址池中去除）</p><p>（获取完地址时不再与服务器交流，直到续约到达一半时才会进行交流-续约-Request包）</p><h3 id="5-DHCP续约"><a href="#5-DHCP续约" class="headerlink" title="5.DHCP续约"></a>5.DHCP续约</h3><ul><li>当期约过<code>50%</code>后，客户机发送<code>DHCP Request包</code>，进行续约,根据实际情况来选择租约。（如：在肯德基里，使用的为短租约）</li></ul><ul><li>如果服务器无响应，则继续使用，并在85%发送DHCP Request包，进行续约，如果任然无响应，则需要释放IP地址，并重新发送DHCP </li></ul><p>Discovery广播包来获取IP地址</p><ul><li>当无服务器响应时，自动给自分配一个169.254.x.x/16 (255.255.0.0) （内网可以进行通信）</li></ul><h3 id="6-部署DHCP服务器"><a href="#6-部署DHCP服务器" class="headerlink" title="6.部署DHCP服务器"></a>6.部署DHCP服务器</h3><ol><li><p>IP地址固定（服务器必须固定IP地址）</p></li><li><p>IP地址保留</p><ol><li>去XP复制Mac地址</li><li>Win2003新建保留</li><li>输入信息</li></ol></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/26_btjlgc.png" alt="保留"></p><ol start="4"><li><p>XP释放并获取： ipconfig /release   ipconfig /renew</p></li><li><p>获取的IP与我们设置的一样<br><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/27_wwx6vl.png" alt="IP"></p></li></ol><HR><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>（使用xp–充当员工  与win2003–充当服务器 ）</p><ol><li>首先桥接网络 设置-网络适配器-特定虚拟网络  （必须配置相同）</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/1_hgmlje.png" alt="桥接网络"></p><ol start="2"><li><p>xp自动获取ip即可</p></li><li><p>登录win2003,进行部署，部署为DHCP服务器</p></li><li><p>Win2003 开始-管理工具(查找DHCP，如果没有，则需要进行安装)</p></li><li><p>没有则导入Win2003 iso镜像，然后打开文件</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/3_xvkyjm.png" alt="组件安装"></p><ol start="6"><li><p>双击<code>网络服务</code>-勾选<code>DHCP</code>-点击确定-下一步</p></li><li><p>服务器IP需要固定，则配置Win2003IP 为10.1.1.1 255.255.255.0</p></li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/4_by6kvb.png" alt="配置服务器"></p><ol start="8"><li>查看网络状态： netstat -an</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/5_uvmve9.png" alt="netstat"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/6_uenzws.png" alt="安装完成后出现端口67/68"></p><ol start="9"><li>接着使用DHCP 开始-管理工具-DHCP,右键关闭服务</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785071/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/7_agjkxa.png" alt="停止"></p><ol start="10"><li>停止后发现67/68端口号没了，证明DHCP协议的端口号为 67/68</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/8_ivxpn0.png" alt="协议端口"></p><ol start="11"><li>之后启动服务器，新建作用域，下一步-&gt;输入名称，描述-&gt;配置ip地址池-    &gt;添加排除-&gt;租约期限-&gt;设置网关-&gt;dns服务器-&gt;WIN服务器（不再使用，直接下一步）-&gt;激活（做实验可以激活，现实中先检查，ok再激活）-&gt;下一步 完成</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/9_q45ot8.png" alt="创建作用域"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/10_lq2d5u.png" alt="作用域名"></p><p>前后空出一些IP地址，排除开头结尾</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/11_s7y1ci.png" alt="IP地址池"></p><p>排除不分配IP</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/12_uk1sum.png" alt="排除IP"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/13_ll707m.png" alt="设置期限"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/14_ktw7jt.png" alt="设置网关"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/15_pwfgwb.png" alt="给定IP"></p><ol start="12"><li>配置完成</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785072/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/16_phgybu.png" alt="配置完成"></p><ol start="13"><li>进行验证，进入XP 网上邻居右键-》本地连接双击-》点击支持</li></ol><ol start="14"><li>如果文法正常显示，就拔掉网线（右键本地连接，点击停用，再开启，即可）</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785073/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/17_goqybh.png" alt="配置成功"></p><ol start="15"><li>可能也会成功但是不是我们自己配置IP地址，这时先点击VM的编辑-&gt;虚拟网路编辑器 取消DHCP分配</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/18_pyi4za.png" alt="DHCP分配"></p><ol start="16"><li>查看服务器WIN2003</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/19_kwtzst.png" alt="服务器"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785069/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/20_esywcn.png" alt="MAC地址"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/21_jraipx.png" alt="XP ip详细信息"></p><ol start="17"><li>XP释放IP ： ipconfig /release   (即解除续约) </li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/22_ew5tpm.png" alt="解除续约"></p><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/23_q14krr.png" alt="地址租约解除"></p><ol start="18"><li>XP无ip发送<code>Discovery</code>包 获取IP    : ipconfig /renew</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/24_hj1hsk.png" alt="获取IP"></p><ol start="19"><li>当又ip时再次发送： ipconfig /renew  相当于发送<code>request</code>包，获取续约</li></ol><p><img src="https://res.cloudinary.com/valent/image/upload/v1591785070/Blog/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/DHCP/25_xwvcat.png" alt="续约"></p><pre class=" language-客户机验证"><code class="language-客户机验证">ipconfig /release  当有IP时，释放IPipconfig /renew    当无ip时时自动获取IP；当有ip时再次执行相当于续约</code></pre><hr><h3 id="7-DHCP选项优先级"><a href="#7-DHCP选项优先级" class="headerlink" title="7.DHCP选项优先级"></a>7.DHCP选项优先级</h3><p><code>作用域选项</code>&gt;<code>服务器选项</code></p><p>当服务器上有多个的作用域时，可以在<code>服务器选项</code>设置<code>DNS服务器</code></p><h3 id="8-DHCP攻击与防御"><a href="#8-DHCP攻击与防御" class="headerlink" title="8.DHCP攻击与防御"></a>8.DHCP攻击与防御</h3><ol><li><p>攻击DHCP服务器： 频繁的发送伪装的<code>DHCP请求</code>,直到<code>DHCP地址池</code>完全耗尽（则无法访问服务器）</p></li><li><p>防御： 在交换机（管理型）的端口上做<code>动态MAC地址绑定</code>（动态绑定：来一个人访问即学，在拔网线之前无法更改，直至拔掉网线-消除缓存）（静态绑定：手工绑定端口，只允许一个访问，如果需要更改则需要向上申请）</p></li><li><p>伪装DHCP服务器攻击： hacker将自己伪装成<code>DHCP服务器</code>,为客户提供非法的ip地址（即hacker自己设定的ip）</p></li><li><p>防御： 在交换机（管理型）（只有管理型才可以进行配置）上，除合法的DHCP服务器所在的接口外，全部设置为<code>禁止发送DHCP Offer包</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/2020/06/06/bian-yi-yuan-li/"/>
      <url>/2020/06/06/bian-yi-yuan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>个人学习笔记</p></blockquote><h2 id="1-文法的定义"><a href="#1-文法的定义" class="headerlink" title="1.文法的定义"></a>1.文法的定义</h2><ul><li>文 法 G：定义为四元组（VN，VT，P，S），其中<br>  VN  ： 非终结符集<br>  VT  ： 终结符集<br>  P   ： 产生式（规则）集合<br>  S   ： 开始符号（起始符、识别符号）</li></ul><p>VN、VT 和 P 是非空有穷集。S 至少在一条规则中作为左部出现。VN∩VT= φ， S∈VN ，V=VN∪VT，称为文法G的字母表（字汇表）</p><p>如：</p><pre class=" language-文法"><code class="language-文法">文法G=（VN，VT，P，S）    VN = { S },             VT = { 0, 1 }    P  = { S→0S1,  S→01 }    S为开始符号或写成：    G[S]： S→0S1,  S→01 </code></pre><h3 id="1-文法约定"><a href="#1-文法约定" class="headerlink" title="1.文法约定"></a>1.文法约定</h3><ul><li><p>第一条产生式的左部是开始符号</p></li><li><p>用尖括号括起的是非终结符，否则为终结符。或者大写字母表示非终结符，小写字母表示终结符</p></li><li><p>G可写成G[S]，其中S是开始符号</p></li></ul><h3 id="2-文法的句型、句子的定义"><a href="#2-文法的句型、句子的定义" class="headerlink" title="2.文法的句型、句子的定义"></a>2.文法的句型、句子的定义</h3><ul><li>句型<ul><li>设G[S]是一文法，如果符号串x是从开始符号推导出来的，即S=&gt;x，则称x是文法G[S]的句型。</li><li>句型是推导过程中生成的产生式。<br>例如：<pre class=" language-例子"><code class="language-例子">有下列文法：　　S→AB　　A→aA|a　　B→bB|b用上述文法推导字符串aaabbb过程如下：S→AB→aAB→aaAB→aaaB→aaabB→aaabbB→aaabbbAB、aAB、aaAB、aaaB、aaabB、aaabbB和aaabbb都是上述文法的一个句型</code></pre></li></ul></li><li>句子<ul><li>X为只有终结符的句型为句子，则称x是G[S]的句子。<pre class=" language-例子"><code class="language-例子">此时句子为上述的： aaabbb</code></pre></li></ul></li></ul><h3 id="3-语言定义"><a href="#3-语言定义" class="headerlink" title="3.语言定义"></a>3.语言定义</h3><ul><li>由文法G生成的语言记为L(G)，它是文法G的全部句子（只有终结符）的集合:                                       L(G) = { x | S     <pre class=" language-例子"><code class="language-例子">例：G： S→0S1， S→01      L(G) = { 0n1n | n≥1 }</code></pre></li></ul><h3 id="4-文法等价"><a href="#4-文法等价" class="headerlink" title="4.文法等价"></a>4.文法等价</h3><ul><li>若L(G1) = L(G2)，则称文法G1和G2是等价的。<br>如<pre class=" language-文法"><code class="language-文法">G1[A]：A→0R  与G2[S]：S→0S1 等价           A→01           S→01           R→A1</code></pre>注：语言和文法的对应关系是一对多（1：n）的关系。</li></ul><h3 id="5-文法类型"><a href="#5-文法类型" class="headerlink" title="5.文法类型"></a>5.文法类型</h3><ul><li><p>0型文法：对任一产生式α→β，都有α∈(VN∪VT)+， β∈(VN∪VT)*</p></li><li><p>1型文法：对任一产生式α→β，都有|β|≥|α|， 仅仅 S→ε除外</p></li><li><p>2型文法：对任一产生式α→β，都有α∈VN ，β∈(VN∪VT)*</p></li><li><p>3型文法：任一产生式α→β的形式都为<br>(1) A→aB 或 A→a，其中A∈VN ，B∈VN ，a∈VT    (右线性文法)<br>(2) A→Ba 或 A→a，其中A∈VN ，B∈VN ，a∈VT    (左线性文法)</p><hr></li><li><p>1型文法：对任一产生式α→β，都有|β|≥|α|， 仅仅 S→ε除外</p></li><li><p>上下文有关文法： α1Aα2→α1βα2(A在VN中，其他在V*中，β≠ε)</p></li><li><p>2型文法：对任一产生式α→β，都有α∈VN ， β∈(VN∪VT)*</p></li><li><p>上下文无关文法：A→β(A在VN中，β在V*中，)</p></li><li><p>3型文法也叫正规文法</p></li></ul><pre class=" language-1型（上下文有关）文法"><code class="language-1型（上下文有关）文法">1型（上下文有关）文法   文法G[S]：    S→aSBE                S→aBE                EB→BE                aB→ab                bB→bb                bE→be                eE→ee</code></pre><pre class=" language-2型（上下文无关）文法"><code class="language-2型（上下文无关）文法">   文法G[S]：    S→aB|bA                A→a|aS|bAA                B→b|bS|aBB</code></pre><pre class=" language-3型文法"><code class="language-3型文法">    G[S]：  S→0A|1B|0            A→0A|1B|0S            B→1B|1|0</code></pre><h3 id="6-文法与语言"><a href="#6-文法与语言" class="headerlink" title="6.文法与语言"></a>6.文法与语言</h3><ul><li>0型文法( PSG )产生的语言称为0型语言</li><li>1型文法或上下文有关文法（ CSG ）产生的语言称为<code>1型语言</code>或<code>上下文有关语言</code>（CSL）</li><li>2型文法或上下文无关文法（ CFG ）产生的语言称为<code>2型语言</code>或<code>上下文无关语言</code>（ CF L ） </li><li>3型文法或正则（正规）文法（ RG ）产生的语言称为<code>3型语言</code>或<code>正则（正规）语言</code>（ RL ）</li></ul><h3 id="7-二义性"><a href="#7-二义性" class="headerlink" title="7.二义性"></a>7.二义性</h3><ul><li><p>给定一个文法G,存在一个句子S，S具有两颗不同的分析树，则该文法为<code>二义性文法</code></p></li><li><p>文法的某一个句子，它有两个（包括两个）以上的最右（最左）推导。则该文法为<code>二义性文法</code></p></li><li><p>文法的二义性和句子的二义性： 一个包含二义性文法的句子，称这个文法是二义性的。</p></li><li><p>文法的二义性和语言的二义性是不同的概念</p></li></ul><h3 id="8-自顶向下分析法"><a href="#8-自顶向下分析法" class="headerlink" title="8.自顶向下分析法"></a>8.自顶向下分析法</h3><ul><li>自上而下分析法（推导）：<br>  从文法的开始符号出发，反复使用各种产生式，寻找与输入符号匹配的推导。</li></ul><ol><li>LL(1)</li></ol><p>LL(1)分析法对于文法的要求：<br>对于 G 中的每个产生式 A →γ 1 | γ 2 | … | γ m ，其各候选式均应满足：<br>（1）不同的候选式不能推出以同一终结符号打头的符号串，即<br>FIRST( γ i ) ∩ FIRST( γ j )= φ（ 1 ≤ i ， j ≤ m ； i ≠ j ）<br>（2）若有γ j  ε，则其余候选式γ i 所能推出的符号串不能以 FOLLOW(A) 中的终结符号开始，即有<br>FIRST( γ i ) ∩ FOLLOW(A)= φ（ i ≤ 1,2, … ,m ； i ≠ j ）</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><code>LL(k)</code>文法(都不是)二义性的。</li></ol><h3 id="10-自下而上分析法"><a href="#10-自下而上分析法" class="headerlink" title="10.自下而上分析法"></a>10.自下而上分析法</h3><ul><li>自下而上分析法（归约）：<br>  从输入符号串开始，逐步进行归约，直至归约到文法的开始符号。</li></ul><ol><li><p>LR(0)</p></li><li><p>SLR(1)</p></li><li><p>LR(1)</p></li><li><p>LALR(1)</p></li></ol><h3 id="11-LL-1-、LR-0-、SLR-1-、LR-1-、LALR-1-文法的对比"><a href="#11-LL-1-、LR-0-、SLR-1-、LR-1-、LALR-1-文法的对比" class="headerlink" title="11.LL(1) 、LR(0)、SLR(1)、LR(1)、LALR(1)文法的对比"></a>11.LL(1) 、LR(0)、SLR(1)、LR(1)、LALR(1)文法的对比</h3><p><img src="https://res.cloudinary.com/valent/image/upload/v1591447825/Blog/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/1_bqhd1j.png" alt="对比图"></p><p>上图是四种文法的包含关系，即 LR(1)文法范围最大，而 LR(0)文法范围最小。同时也说明了四种文法分析过程的强弱，即 LR(1)文法分析最强，而 LR(0)文法分析最弱。</p><h3 id="12-短语、直接短语、句柄的定义"><a href="#12-短语、直接短语、句柄的定义" class="headerlink" title="12.短语、直接短语、句柄的定义"></a>12.短语、直接短语、句柄的定义</h3><ol><li><p>短语</p></li><li><p>素短语: 是一个短语，它至少包含一个终结符，且除自身外不再包含其他素短语。</p></li><li><p>直接短语: 若有 A =&gt;β则称β是句型αβδ相对于规则A→β的直接短语（或简单短语）</p></li><li><p>句柄: 一个句型的最左直接短语称为该句型的句柄。</p></li><li><p>一棵语法树表示了一个句型所有的不同推导过程，包括<code>最右推导</code>和<code>最左推导</code></p></li></ol><h3 id="13-文法化简"><a href="#13-文法化简" class="headerlink" title="13.文法化简"></a>13.文法化简</h3><ul><li><p>文法中不得含有有害规则和多余规则</p><ul><li>有害规则：形如U→U的产生式。会引起文法的二义性。</li><li>多余规则：指文法中任何句子的推导都不会用到的规则。<ol><li>文法中某些非终结符不在任何规则的右部出现，该非终结符称为不可到达的。</li><li>文法中某些非终结符，由它不能推出终结符号串来，称为不可终止的。</li></ol></li></ul></li><li><p>对于文法G[S]，为了保证任一非终结符A在句子推导中出现，必须满足如下两个条件：</p><ol><li><p>A必须在某句型中出现。</p></li><li><p>必须能从A推出终结符号串t来。</p><p>即： </p></li><li><p>文法G[S]，对某两个符号串α和β：S(<code>*</code>)=&gt;αAβ<br>2。 A (+)=&gt;  t ,t∈VT*    (一步推导到终结符)</p></li></ol></li></ul><p>注： (<code>*</code>)=&gt;包含0步推导(多步推导)；而 (+)=&gt;不包含0步推导（一步推导）。</p><p>如：</p><pre class=" language-化简文法"><code class="language-化简文法">G[S] ： S → ASe | BCaD | aD | AC A → Cb | DBS C → bC | d B → Ac D → aD </code></pre><ol><li><p>首先先写出所有的非终态，即：S A B C D</p></li><li><p>去除无法推出终结符的 D</p></li><li><p>去除无法推到的产生式子 B-&gt;Ac</p></li></ol><p>得出</p><pre class=" language-化简"><code class="language-化简">G[S] ： S → ASe | AC A → CbC → bC | d  </code></pre><h2 id="2-词法分析"><a href="#2-词法分析" class="headerlink" title="2.词法分析"></a>2.词法分析</h2><ul><li>词法分析程序的设计</li><li>单词的描述工具</li><li>有限自动机</li><li>正规式和有穷自动机的等价性</li><li>正规文法和有穷自动机间的转换</li><li>词法分析程序的自动构造工具</li></ul><h3 id="1-单词的描述工具"><a href="#1-单词的描述工具" class="headerlink" title="1.单词的描述工具"></a>1.单词的描述工具</h3><ul><li>正规文法：<br>文法G=（VN，VT，P，S），P中每一产生式的形式都为：<br>① A→aB 或 A→a，（右线型文法）<br>② A→Ba 或 A→a，（左线型文法）<br>其中：A∈VN ，B∈VN ， a∈VT</li></ul><h3 id="2-正规式的运算律"><a href="#2-正规式的运算律" class="headerlink" title="2.正规式的运算律"></a>2.正规式的运算律</h3><ul><li>设 r, s, t 为正规式，正规式服从的代数规律有：<br>1、 r|s = s|r        “或”服从交换律<br>2、 r|(s|t) = (r|s)|t    “或”的可结合律<br>3、 (rs)t = r(st)        “连接”的可结合律<br>4、 r(s|t) = rs|rt<br>(s|t)r = sr|tr               分配律<br>5、 εr = r, rε = r        ε是“连接”的恒等元素<br>6、 r|r = r<br>r* = ε|r|rr|…    “或”的抽取律</li></ul><h3 id="3-正规文法和正规式的等价变换"><a href="#3-正规文法和正规式的等价变换" class="headerlink" title="3.正规文法和正规式的等价变换"></a>3.正规文法和正规式的等价变换</h3><p>正规式 r , 存在一个G=(VN,VT,P,S) 使得 L(G) = L(r) ，反之亦然。</p><h4 id="1-将正规式转换成正规文法"><a href="#1-将正规式转换成正规文法" class="headerlink" title="1.将正规式转换成正规文法"></a>1.将正规式转换成正规文法</h4><ol><li>对形如  A -&gt; xy 的正规产生式：A -&gt; xB    B -&gt; y         </li><li>对形如A-&gt;x<code>*</code>y的正规产生式： A -&gt; xA    A -&gt; y                         </li><li>对形如A-&gt;x|y的正规产生式:   A -&gt; x        A -&gt; y<br>不断应用上述规则做变换，直到每个产生式最多含一个终结符。</li></ol><h4 id="2-将正规文法转换成正规式"><a href="#2-将正规文法转换成正规式" class="headerlink" title="2.将正规文法转换成正规式"></a>2.将正规文法转换成正规式</h4><p>文法产生式            正规式</p><ol><li>A -&gt; xB,B -&gt; y    ==  A = xy </li><li>A -&gt; xA|y        ==  A = x<code>*</code>y</li><li>A -&gt; x|y            ==  A = x|y</li></ol><h3 id="4-有穷自动机"><a href="#4-有穷自动机" class="headerlink" title="4.有穷自动机"></a>4.有穷自动机</h3><h4 id="1-DFA定义"><a href="#1-DFA定义" class="headerlink" title="1.DFA定义"></a>1.DFA定义</h4><ul><li><code>DFA</code>定义：一个确定的有穷自动机（DFA）M是一个五元组：M=（K，Σ，f，S，Z）其中:<ol><li>K 是一个有穷集，状态集,它的每个元素称为一个状态；</li><li>Σ 是一个有穷字母表，它的每个元素称为一个输入符号，所以也称Σ为输入符号表；</li><li>f 是转换函数，是在 K×Σ→K 上的映射，即，如f（ki，a）=kj，（ki∈K，kj∈K）就意味着，当前状态为ki，输入符为 a 时，将转换为下一个状态 kj，我们把 kj 称作 ki 的一个后继状态；</li><li>S∈K 是唯一的一个初态；</li><li>Z∈K 是一个终态集，终态也称可接受状态或结束状态。</li></ol></li></ul><p>简单来说：<br>K: 非终态集合<br>Σ: 终态集合<br>f: 状态转换函数<br>S: 初态（唯一）<br>Z： 终态集合</p><h4 id="2-NFA定义"><a href="#2-NFA定义" class="headerlink" title="2.NFA定义"></a>2.NFA定义</h4><ul><li>定义(不确定发有穷自动机)<ul><li>N = (K，Σ，f，S，Z)，其中：<br>K为状态的有穷非空集，<br>Σ 为有穷输入字母表，<br>f为映射函数，f: KxΣ*  → 2K，<br>S∈K是初始状态集，<br>Z∈K为终止状态集。</li></ul></li></ul><h4 id="3-NFA的确定化"><a href="#3-NFA的确定化" class="headerlink" title="3.NFA的确定化"></a>3.NFA的确定化</h4><p>DFA是NFA的特例.对每个DFA   M一定存在一个NFA  Ｍ’ ，使得  L(M)=L(M ‘)。</p><p>对每个NFA M存在着与之等价的DFA  M ‘ 。与某一NFA等价的DFA不唯一。</p><pre><code>1. 状态集合 I 的 ε-闭包,表示为ε-closure(I), 定义为一状态集, 是状态集I中的任何状态R经任意条ε弧而能到达的状态的集合。 状态集合I的任何状态R都属于 ε-closure(I)。2. 状态集合 I 的 a 弧转换，表示为 move(I,a) 定义为状态集合 J，其中 J 是所有那些可从 I 的某一状态经过一条 a 弧而到达的状态的全体。3. 定义：Ia  =  ε-closure(J)，其中：J= move(I,a) </code></pre><h4 id="4-DFA最小化"><a href="#4-DFA最小化" class="headerlink" title="4.DFA最小化"></a>4.DFA最小化</h4><ul><li>最小状态DFA<ul><li>没有多余状态(死状态、不可达状态)</li><li>没有两个状态是互相等价（不可区别）</li></ul></li><li>两个状态s和t等价：满足<ul><li>一致性——同是终态或同是非终态</li><li>蔓延性——从s出发读入某个a(a∈Σ)和从               t出发读入某个a到达的状态等价。</li></ul></li></ul><ol><li><p>先读出所有的终结符与非终结符</p></li><li><p>一步步划分等价的非终结符，直到无法划分即可</p></li><li><p>根据划分后的非终结符集合画出<code>DFA</code></p></li></ol><h2 id="3-自顶向下语法分析方法"><a href="#3-自顶向下语法分析方法" class="headerlink" title="3.自顶向下语法分析方法"></a>3.自顶向下语法分析方法</h2><ul><li>确定的自顶向下分析思想</li><li>LL(1)文法的判别</li><li>某些非LL(1)文法到LL(1)文法的等价变换</li><li>不确定的自顶向下分析思想</li><li>确定的自顶向下分析方法</li></ul><h3 id="1-文法分析"><a href="#1-文法分析" class="headerlink" title="1.文法分析"></a>1.文法分析</h3><ol><li><p>First集: 非终结符可以推到的第一个<code>终态集合</code></p></li><li><p>Follow集: 非终结符的下一位，如果推到终结符，则写入，如果推出空集则写入<code>#</code></p><pre><code>对于 A→α             A→β其中A∈VN ,  α, β ∈VN*当α和β不同时推导出空时（设 α不推导出空，β推导出空），则当FIRST(α)∩(FIRST(β)∪FOLLOW(A)) = Φ 时，对于非终结符A的替换仍可唯一地 确定候选。</code></pre></li><li><p>Select集: 当该产生式右部不为空，则相当于First集  当为空时相当于First集 U Follow集  (合并)</p></li></ol><h3 id="2-LL-1-文法的充要条件"><a href="#2-LL-1-文法的充要条件" class="headerlink" title="2.LL(1)文法的充要条件"></a>2.LL(1)文法的充要条件</h3><p>对每个非终结符A的两个不同产生式A→α和A→β，满足SELECT(A→α)∩SELECT(A→β)=Φ其中α,β不能同时  (<code>*</code>)=&gt;  ε</p><h3 id="3-非LL-1-到LL（1）转换"><a href="#3-非LL-1-到LL（1）转换" class="headerlink" title="3.非LL(1)到LL（1）转换"></a>3.非LL(1)到LL（1）转换</h3><ul><li>提取左公共因子</li><li>消除左递归</li></ul><h4 id="1-提取左公共因子"><a href="#1-提取左公共因子" class="headerlink" title="1.提取左公共因子"></a>1.提取左公共因子</h4><ul><li><p>A→αβ|αγ导致SELECT(A→αβ)∩ SELECT(A→αγ)≠Φ，因此是非LL(1)文法。</p></li><li><p>等价变换为A→α(β|γ)，然后：A→αA ‘                          A’ → β|γ</p></li><li><p>A→αβ1|αβ2|…|αβn |δ1|…| …|δm变换为: A→αA’ |δ1|…| …|δm     A’ → β1|β2|…|βn</p></li></ul><p>如：</p><pre class=" language-文法"><code class="language-文法">G1[S] 为:S→aSbS→aSS→ε化为：S→aS(b|ε)S→ε进一步化为：S→aSAS→ε A→bA→ε</code></pre><ul><li>不一定每个文法的左公共因子都能在有限的步骤内替换成无左公共因子的文法，文法中不含左公共因子只是LL(1)文法的必要条件。</li></ul><h4 id="2-消除左递归"><a href="#2-消除左递归" class="headerlink" title="2.消除左递归"></a>2.消除左递归</h4><ol><li><p>直接左递归：<br>A→Aβ<br>A∈VN, β ∈V*</p></li><li><p>间接左递归：<br>A→Bβ<br>B→Aα<br>A, B∈VN,  α, β ∈V*</p></li></ol><h5 id="1-消除直接左递归"><a href="#1-消除直接左递归" class="headerlink" title="1.消除直接左递归"></a>1.消除直接左递归</h5><p>把直接左递归改写为右递归。<br>如G5:<br>S→Sa<br>S→b<br>(L={ban|n≥0})<br>改为：<br>S→bS’<br>S’→aS’|ε</p><p>1.将无直接左递归的产生式改写成如：S→bS’</p><p>2.写出产生式S’,将有直接左递归的产生式改写成如： S’→aS’|ε    （最后添加ε）</p><pre class=" language-左递归"><code class="language-左递归">消除直接左递归的一般方法：A→Aα1| Aα2|…| Aαm|β1|β2|…|βn  其中： αi 不等于ε ， βj不以A开头。 改为：  A→ β1A'| β2A' |…| βnA'   A'→ α1A' | α2A' |…| αmA' |ε</code></pre><h5 id="2-消除间接左递归"><a href="#2-消除间接左递归" class="headerlink" title="2.消除间接左递归"></a>2.消除间接左递归</h5><ul><li>将间接左递归变为直接左递归，然后消除直接左递归。</li></ul><h3 id="4-文法化简"><a href="#4-文法化简" class="headerlink" title="4.文法化简"></a>4.文法化简</h3><p>如：</p><pre class=" language-例题"><code class="language-例题">化简文法 G[S] ： S → ASe | BCaD | aD | AC A → Cb | DBS C → bC | d B → Ac D → aD </code></pre><h2 id="LR-分析法"><a href="#LR-分析法" class="headerlink" title="LR(分析法)"></a>LR(分析法)</h2><p>LR(0)项目集规范族: 构成识别一个文法活前缀的DFA项目集（状态）的全体称为这个文法的LR(0)项目集规范族.</p><p>LR(0)文法：若其LR(0)项目集规范族不存在移进-归约，或归约-归约冲突，称为LR(0)文法。</p><h3 id="构造识别文法活前缀DFA的三种方法"><a href="#构造识别文法活前缀DFA的三种方法" class="headerlink" title="构造识别文法活前缀DFA的三种方法"></a>构造识别文法活前缀DFA的三种方法</h3><p>一、 根据形式定义求出活前缀的正规表达式，然后由此正规表达式构造NFA再确定化为DFA<br>二、 求出文法的所有项目，按一定规则构造识别活前缀的NFA再确定化为DFA<br>三、 使用闭包函数（CLOSURE）和转向函数(GOTO(I,X))构造文法G’的LR(0)的项目集规范族，再由转换函数建立状态之间的连接关系得到识别活前缀的DFA</p><ul><li>一个项目集可能包含多种项目<br>a) 移进和归约项目同时存在。移进-归约冲突<br>b) 归约和归约项目同时存在。归约-归约冲突</li></ul><h3 id="LR-0-分析表构造"><a href="#LR-0-分析表构造" class="headerlink" title="LR(0)分析表构造"></a>LR(0)分析表构造</h3><p>例子：E -&gt; aA   E -&gt; bB   A -&gt; cA    A -&gt; d  B -&gt; cB    B -&gt; d</p><ul><li><p>第一步：对文法G进行拓广，得其拓广文法G‘[S’]：</p><ol start="0"><li>S’ -&gt; E    </li><li>E -&gt; aA      </li><li>E -&gt; bB      </li><li>A -&gt; cA    </li><li>A -&gt; d         </li><li>B -&gt; cB       </li><li>B -&gt; d</li></ol></li><li><p>第二步：对拓广文法G‘[S’] ，构造出其LR(0)项目集规范簇I</p></li></ul><p><img src="https://res.cloudinary.com/valent/image/upload/v1591631943/Blog/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/2_g1auia.png" alt="项目集规范簇I"></p><ul><li>第三步：根据LR(0)项目集规范簇，构造出LR(0)分析表</li></ul><p><img src="https://res.cloudinary.com/valent/image/upload/v1591631943/Blog/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/3_enagna.png" alt="LR(0)分析表"></p><h3 id="SLR-1"><a href="#SLR-1" class="headerlink" title="SLR(1)"></a>SLR(1)</h3><p><img src="https://res.cloudinary.com/valent/image/upload/v1591632105/Blog/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/4_og3x8z.png" alt="SLR(1)"></p><h1 id="4-编译程序与解释程序"><a href="#4-编译程序与解释程序" class="headerlink" title="4.编译程序与解释程序"></a>4.编译程序与解释程序</h1><ol><li><p>主要区别： 解释程序与编译程序的主要区别: 不产生目标程序</p></li><li><p>在编译程序的设计中，<code>中间代码</code>生成和优化功能并不是必须的</p></li><li><p>编译程序的实现与具体的机器有关，与具体的语言也是有关的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习</title>
      <link href="/2020/06/04/python-xue-xi/"/>
      <url>/2020/06/04/python-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-Tkinter"><a href="#Python-Tkinter" class="headerlink" title="Python Tkinter"></a>Python Tkinter</h1><p>Python 提供了多个图形开发界面的库，几个常用 Python GUI 库如下：</p><ul><li><p>Tkinter： <code>Tkinter</code> 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。</p></li><li><p>wxPython：<code>wxPython</code> 是一款开源软件，是 Python 语言的一套优秀的 GUI 图形库，允许 Python 程序员很方便的创建完整的、功能健全的 GUI 用户界面。</p></li><li><p>Jython：<code>Jython</code> 程序可以和 Java 无缝集成。除了一些标准模块，Jython 使用 Java 的模块。Jython 几乎拥有标准的Python 中不依赖于 C 语言的全部模块。比如，Jython 的用户界面将使用 Swing，AWT或者 SWT。Jython 可以被动态或静态地编译成 Java 字节码。</p></li></ul><h3 id="1-Tkinter编程"><a href="#1-Tkinter编程" class="headerlink" title="1.Tkinter编程"></a>1.Tkinter编程</h3><p>grid(row= ,column= ，columnspan= ,rowspan= )<br>代表的是占据几行，几列,总共占据几列,总共占据几行</p><p>str(二元组) 将二元组变成字符串</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程 </tag>
            
            <tag> Tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2020/06/02/markdown/"/>
      <url>/2020/06/02/markdown/</url>
      
        <content type="html"><![CDATA[<center><h1 id="1-Markdown标题"><a href="#1-Markdown标题" class="headerlink" title="1.Markdown标题"></a>1.Markdown标题</h1></center><p><code>Markdown</code>标题有两种格式</p><h3 id="1-使用-和-标记一级和二级标题"><a href="#1-使用-和-标记一级和二级标题" class="headerlink" title="1.使用 = 和 - 标记一级和二级标题"></a>1.使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><pre class=" language-md"><code class="language-md">我展示的是一级标题=================我展示的是二级标题-----------------</code></pre><p>效果如下：</p><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a>我展示的是一级标题</h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a>我展示的是二级标题</h2><h3 id="2-的使用"><a href="#2-的使用" class="headerlink" title="2.#的使用"></a>2.<code>#</code>的使用</h3><p>使用 <code>#</code>号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><pre class=" language-md"><code class="language-md"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p>效果如下：</p><center><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></center><hr><center><h1 id="2-Markdown字体"><a href="#2-Markdown字体" class="headerlink" title="2.Markdown字体"></a>2.Markdown字体</h1></center><h3 id="1-Markdown-段落"><a href="#1-Markdown-段落" class="headerlink" title="1. Markdown 段落"></a>1. Markdown 段落</h3><p>没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><pre class=" language-md"><code class="language-md">无特殊格式  </code></pre><h3 id="2-Markdown字体："><a href="#2-Markdown字体：" class="headerlink" title="2. Markdown字体："></a>2. Markdown字体：</h3><pre class=" language-md"><code class="language-md">*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><p>效果如下:  </p><center><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p></center><h3 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3. 分割线"></a>3. 分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><p><code>* * *</code><br><code>*****</code><br><code>- - - -</code><br><code>----------</code></p><p>效果如下： </p><hr><hr><hr><hr><hr><h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线<code>~~</code> 即可，实例如下：</p><pre class=" language-md"><code class="language-md">删除线~~删除线~~~</code></pre><p>效果如下：</p><p>删除线<br><del>删除线</del></p><h3 id="5-下划线"><a href="#5-下划线" class="headerlink" title="5. 下划线"></a>5. 下划线</h3><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><pre class=" language-md"><code class="language-md"><u>下划线</u></code></pre><p>效果如下：</p><center><u>下划线</u></center><hr><center><h1 id="3-Markdown列表"><a href="#3-Markdown列表" class="headerlink" title="3.Markdown列表"></a>3.Markdown列表</h1></center><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记：</p><pre class=" language-md"><code class="language-md">* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><p>效果如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 <code>.</code> 号来表示，如：</p><pre class=" language-md"><code class="language-md">1. 第一项2. 第二项3. 第三项</code></pre><p>效果如下： </p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><hr><center><h1 id="4-Markdown区块"><a href="#4-Markdown区块" class="headerlink" title="4.Markdown区块"></a>4.Markdown区块</h1></center><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个空格符号：</p><pre class=" language-md"><code class="language-md">> 区块一>> 区块二>>> 区块三</code></pre><p>效果如下：</p><blockquote><p>区块一</p><blockquote><p>区块二</p><blockquote><p>区块三</p></blockquote></blockquote></blockquote><hr><center><h1 id="5-Markdown代码"><a href="#5-Markdown代码" class="headerlink" title="5.Markdown代码"></a>5.Markdown代码</h1></center><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来(`)，例如：</p><pre class=" language-md"><code class="language-md">`main()`函数</code></pre><p>效果如下：<br><code>main()</code>函数</p><p>也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：  </p><pre class=" language-md"><code class="language-md">### 三级目录#### 四级目录</code></pre><hr><center><h1 id="6-Markdown链接"><a href="#6-Markdown链接" class="headerlink" title="6.Markdown链接"></a>6.Markdown链接</h1></center><h3 id="1-一般链接使用"><a href="#1-一般链接使用" class="headerlink" title="1.一般链接使用"></a>1.一般链接使用</h3><p>使用方法：</p><pre class=" language-md"><code class="language-md">[链接名](链接地址)或<链接地址>[sublime](https://www.sublimetext.com/3)  <https://www.sublimetext.com/3></code></pre><p>效果如下：</p><p><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime</a>  </p><p><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></p><h3 id="2-高级链接使用"><a href="#2-高级链接使用" class="headerlink" title="2.高级链接使用"></a>2.高级链接使用</h3><p>可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><pre class=" language-md"><code class="language-md">链接使用a为变量[sublime][a][a]: https://www.sublimetext.com/3</code></pre><p>效果如下：<br>链接使用a为变量<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime</a></p><hr><center><h1 id="7-Markdown图片"><a href="#7-Markdown图片" class="headerlink" title="7.Markdown图片"></a>7.Markdown图片</h1></center><p>图片一般语法为：</p><pre class=" language-md"><code class="language-md">![图片的代替文字](图片地址)</code></pre><p>效果如下：</p><p><img src="https://res.cloudinary.com/valent/image/upload/v1566550076/Blog/Background/5d2853e0e4d36_kxs5k4.jpg" alt="图片的代替文字"></p><p>也可以像网址那样对图片网址使用变量:</p><pre class=" language-md"><code class="language-md">图片的代替文字[图片的代替文字][图片地址][图片地址]: https://res.cloudinary.com/valent/image/upload/v1566550076/Blog/Background/5d2853e0e4d36_kxs5k4.jpg</code></pre><p>效果如下：</p><p>图片的代替文字<a href="https://res.cloudinary.com/valent/image/upload/v1566550076/Blog/Background/5d2853e0e4d36_kxs5k4.jpg" target="_blank" rel="noopener">图片的代替文字</a></p><hr><center><h1 id="8-Markdown表格"><a href="#8-Markdown表格" class="headerlink" title="8.Markdown表格"></a>8.Markdown表格</h1></center>Markdown 制作表格使用 `|` 来分隔不同的单元格，使用 `-` 来分隔表头和其他行。<p>语法格式如下：</p><pre class=" language-md"><code class="language-md">|  人物   | 评级  | 技能 ||  ----  | ----  | ---- || 吕布  | SSS | 战神附体 || 关羽  | SS | 战马冲锋 |</code></pre><p>效果如下：</p><table><thead><tr><th>人物</th><th>评级</th><th>技能</th></tr></thead><tbody><tr><td>吕布</td><td>SSS</td><td>战神附体</td></tr><tr><td>关羽</td><td>SS</td><td>战马冲锋</td></tr></tbody></table><p>对齐方式</p><p>我们可以设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><hr><center><h1 id="8-Markdown其它"><a href="#8-Markdown其它" class="headerlink" title="8.Markdown其它"></a>8.Markdown其它</h1></center><h3 id="1-转义"><a href="#1-转义" class="headerlink" title="1.转义"></a>1.转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符</p><pre class=" language-md"><code class="language-md">**文本加粗** \*\* 正常显示星号 \*\*</code></pre><p>效果如下：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class=" language-md"><code class="language-md">\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><p>效果如下：<br>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   下划线<br>{}  花括号<br>[]  方括号<br>()  小括号<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   感叹号</li></ul><h3 id="2-公式"><a href="#2-公式" class="headerlink" title="2.公式"></a>2.公式</h3><p>加载 Mathjax 对数学公式进行渲染：</p><pre class=" language-md"><code class="language-md">$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}$$</code></pre><p>效果如下：</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery魔改</title>
      <link href="/2020/06/02/matery-mo-gai/"/>
      <url>/2020/06/02/matery-mo-gai/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主题魔改</p></blockquote><h3 id="1-添加天气插件"><a href="#1-添加天气插件" class="headerlink" title="1.添加天气插件"></a>1.添加天气插件</h3><p>进入<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">中国天气网</a>来定制自己的插件</p><p>自定义之后选择<code>生成代码</code>，生成如下一段代码</p><p>效果如下<br><img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/Blog/matery/1.png" alt="效果图"></p><p>将定制好后的代码复制到themes/matery/layout/layout.ejs即可</p><h3 id="2-修改代码块样式"><a href="#2-修改代码块样式" class="headerlink" title="2.修改代码块样式"></a>2.修改代码块样式</h3><p>自定义自己的代码块间的样式，按<code>F12</code>，先在网页上进行调试，直到自己满意再复制粘贴到相应的文件中</p><ol><li>CSS添加选择器 <code>hover</code><br>当鼠标经过，自动变幻<pre class=" language-css"><code class="language-css"><span class="token selector">code<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#d2cc14</span><span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ffe20f</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="3-添加樱花效果"><a href="#3-添加樱花效果" class="headerlink" title="3.添加樱花效果"></a>3.添加樱花效果</h3><p>在<code>layout.ejs</code>导入</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>樱花特效<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/Emperortino/CDN2/js/cool/sakura.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>也可以自己下载下来保存，然后在<code>src</code>后面写入自己的路径</p><h3 id="4-文章末尾添加结束标记"><a href="#4-文章末尾添加结束标记" class="headerlink" title="4.文章末尾添加结束标记"></a>4.文章末尾添加结束标记</h3><p>效果如下：<br><img src="" alt=""></p><p>新建布局文件<code>post-end-tag.swig</code>，添加代码如下：</p><pre class=" language-themes\matery\layout\_macro\post-end-tag.swig"><code class="language-themes\matery\layout\_macro\post-end-tag.swig"><div>  {% if not is_index %}    <div style="text-align:center;color:#bfbfbf;font-size:16px;">      <span>-------- 本文结束 </span>      <i class="fa fa-{{ config.post_end_tag.icon }}"></i>      <span> 感谢阅读 --------</span>    </div>  {% endif %}</div></code></pre><p>在文章布局中添加如下：</p><pre class=" language-themes\matery\layout\post.ejs"><code class="language-themes\matery\layout\post.ejs">{% if config.post_end_tag.enabled and not is_index %}  <div>   {% include 'post-end-tag.swig' %}  </div>{% endif %}</code></pre><p>最后在站点配置文件中添加如下：</p><pre class=" language-_config.yml"><code class="language-_config.yml">post_end_tag:  enabled: true  # 是否开启文末的本文结束标记  icon: paw # 结束标记之间的图标</code></pre><p>重启服务器：</p><pre class=" language-Hexo"><code class="language-Hexo">执行：hexo clean hexo ghexo s</code></pre><h3 id="5-个性化回到顶部"><a href="#5-个性化回到顶部" class="headerlink" title="5.个性化回到顶部"></a>5.个性化回到顶部</h3><p>打开主题的layout文件夹中的layout.ejs文件，添加代码:</p><pre class=" language-css"><code class="language-css">&lt;!-- 上吊猫 -->&lt;div class=<span class="token string">"back-to-top cd-top faa-float animated cd-is-visible"</span> style=<span class="token string">"top: -900px;"</span>>&lt;/div>&lt;link rel=<span class="token string">"stylesheet"</span> type=<span class="token string">"text/css"</span> href=<span class="token string">"https://cdn.jsdelivr.net/gh/Emperortino/CDN2/fun/back-top/css/top.css"</span> />&lt;script type=<span class="token string">"text/javascript"</span> src=<span class="token string">"https://cdn.jsdelivr.net/gh/Emperortino/CDN2/fun/back-top/js/top.js"</span>>&lt;/script> </code></pre><h3 id="6-修改顶部菜单栏"><a href="#6-修改顶部菜单栏" class="headerlink" title="6.修改顶部菜单栏"></a>6.修改顶部菜单栏</h3><ol><li>不移动时隐藏菜单栏</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">header <span class="token class">.nav-transparent</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>+    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-美化代码块"><a href="#7-美化代码块" class="headerlink" title="7.美化代码块"></a>7.美化代码块</h3>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题 </tag>
            
            <tag> hexo </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime</title>
      <link href="/2020/06/02/sublime/"/>
      <url>/2020/06/02/sublime/</url>
      
        <content type="html"><![CDATA[<h1 id="Sublime3-安装-破解-使用"><a href="#Sublime3-安装-破解-使用" class="headerlink" title="Sublime3 安装,破解,使用"></a>Sublime3 安装,破解,使用</h1><h2 id="1：-sublime下载"><a href="#1：-sublime下载" class="headerlink" title="1： sublime下载"></a>1： sublime下载</h2><p> 进入官网,下载<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">sublime</a>  </p><h2 id="2：-sublime破解"><a href="#2：-sublime破解" class="headerlink" title="2： sublime破解"></a>2： sublime破解</h2><ol><li><p>安装完成后，打开<code>Sublime</code></p></li><li><p>打开侧边栏：Help -&gt; Enter Lincense 输入以下许可证（3.2.1 目前我正在使用的这个注册码）</p></li></ol><pre class=" language-bash"><code class="language-bash">ZYNGA INC.50 User LicenseEA7E-811825927BA117 84C9300F 4A0CCBC4 34A56B44985E4562 59F2B63B CCCFF92F 0E646B830FD6487D 1507AE29 9CC4F9F5 0A6F32E30343D868 C18E2CD5 27641A71 25475648309705B3 E468DDC4 1B766A18 7952D28CE627DDBA 960A2153 69A2D98A C87C060745DC6049 8C04EC29 D18DFA40 442C680B1342224D 44D90641 33A3B9F2 46AADB8F</code></pre><ol start="3"><li>激活完成后显示(表明激活成功！！！)<br><img src="https://res.cloudinary.com/valent/image/upload/v1566374585/Blog/Sublime/sublime1_scajls.png" alt=""></li></ol><h2 id="3、安装Package-Control"><a href="#3、安装Package-Control" class="headerlink" title="3、安装Package Control"></a>3、安装Package Control</h2><p>   <code>Package Control</code>为插件管理包，所以我们首先要安装它。有了它，我们就可以很方便的浏览、安装和卸载Sublime Text中的插件。</p><ul><li>方法一<br>通过快捷键或者View &gt; Show Console菜单打开控制台，复制粘贴如下代码回车即可。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> urllib.request,os,hashlib<span class="token punctuation">;</span> h <span class="token operator">=</span> <span class="token string">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class="token string">'ebe013ee18cced0ef93d5f746d80ef60'</span><span class="token punctuation">;</span> pf <span class="token operator">=</span> <span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span> ipp <span class="token operator">=</span> sublime.installed_packages_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> urllib.request.install_opener<span class="token punctuation">(</span> urllib.request.build_opener<span class="token punctuation">(</span> urllib.request.ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> by <span class="token operator">=</span> urllib.request.urlopen<span class="token punctuation">(</span> <span class="token string">'http://packagecontrol.io/'</span> + pf.replace<span class="token punctuation">(</span><span class="token string">' '</span>, <span class="token string">'%20'</span><span class="token punctuation">))</span>.read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dh <span class="token operator">=</span> hashlib.sha256<span class="token punctuation">(</span>by<span class="token punctuation">)</span>.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> print<span class="token punctuation">(</span><span class="token string">'Error validating download (got %s instead of %s), please try manual install'</span> % <span class="token punctuation">(</span>dh, h<span class="token punctuation">))</span> <span class="token keyword">if</span> dh <span class="token operator">!=</span> h <span class="token keyword">else</span> open<span class="token punctuation">(</span>os.path.join<span class="token punctuation">(</span> ipp, pf<span class="token punctuation">)</span>, <span class="token string">'wb'</span> <span class="token punctuation">)</span>.write<span class="token punctuation">(</span>by<span class="token punctuation">)</span></code></pre><ul><li><p>方法二：Package Control源文件下载</p><p> 下载地址：<a href="https://github.com/wbond/package_control" target="_blank" rel="noopener"><code>package contro</code></a>  </p><p> 点击右上角的Clone or download按钮，然后选择Download ZIP</p><p> <img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/1.png" alt="down"></p></li></ul><p>   1.将下载的ZIP文件解压，并重命名为Package Control，未重命名或重命名错误则会出现如下错误提示</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566376245/Blog/Sublime/sublime3_ubv9r9.png" alt=""></p><p>   2.在菜单栏中点击Preferences &gt; Browe Packages…，打开一个文件夹，复制刚才的Package Control文件至此目录下。</p><p>   <img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/2.png" alt="安装"></p><p>   3.在菜单中点击Preferences，若出现Package Settings和package control选项，就说明安装Package Control成功了。</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566376376/Blog/Sublime/sublime5_c42pqu.png" alt=""></p><h3 id="1：-package-control使用失败"><a href="#1：-package-control使用失败" class="headerlink" title="1： package control使用失败"></a>1： package control使用失败</h3><ol><li><p>打开<code>Settings-User</code><br><img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/3.png" alt="User"></p></li><li><p>添加如下内容<br><img src="https://cdn.jsdelivr.net/gh/Emperortino/CDN2/img/sublime/4.png" alt="channels"></p></li><li><p>也可以将channel文件下载下来，下面的路径则变为自己文件所在的路径</p></li><li><p>在菜单中点击<code>Preferences</code>，若出现<code>Package Settings</code>和<code>package control</code>选项，就说明安装<code>Package Control</code>成功了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析（二）</title>
      <link href="/2020/06/01/suan-fa-she-ji-yu-fen-xi-er/"/>
      <url>/2020/06/01/suan-fa-she-ji-yu-fen-xi-er/</url>
      
        <content type="html"><![CDATA[<blockquote><p>算法与设计学习过程<br>坚持更新（使用JAVA语言）</p></blockquote><h1 id="递归算法求解矩阵连乘"><a href="#递归算法求解矩阵连乘" class="headerlink" title="递归算法求解矩阵连乘"></a>递归算法求解矩阵连乘</h1><pre class=" language-bash"><code class="language-bash">/******************** 递归算法求解 ********************/int MatrixChain_Recursive<span class="token punctuation">(</span>int i, int j, int *p, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> 0<span class="token punctuation">;</span>    int u <span class="token operator">=</span> MatrixChain_Recursive<span class="token punctuation">(</span>i, i, p, s<span class="token punctuation">)</span> + MatrixChain_Recursive<span class="token punctuation">(</span>i + 1, j, p, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>   s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i+1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int tmp <span class="token operator">=</span> MatrixChain_Recursive<span class="token punctuation">(</span>i, k, p, s<span class="token punctuation">)</span> + MatrixChain_Recursive<span class="token punctuation">(</span>k + 1, j, p, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> u<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            u <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><pre class=" language-bash"><code class="language-bash">/******************** 动态规划算法 ********************/void MatrixChain_Dynamic<span class="token punctuation">(</span>int n, int *p, int **m, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>             // l <span class="token operator">=</span> 1    <span class="token keyword">for</span> <span class="token punctuation">(</span>int r <span class="token operator">=</span> 2<span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> r++<span class="token punctuation">)</span> // l is the chain length, 自底向上！        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n -r + 1<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int j <span class="token operator">=</span> r + i - 1<span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>i + 1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> +p<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>*p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> //i,j分别对应矩阵链的首尾            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                                                       // k <span class="token operator">=</span> i            <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i + 1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                int t <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> + m<span class="token punctuation">[</span>k + 1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h1 id="备忘录算法"><a href="#备忘录算法" class="headerlink" title="备忘录算法"></a>备忘录算法</h1><pre class=" language-bash"><code class="language-bash">/******************** 备忘录法 ********************/int LookupChain<span class="token punctuation">(</span>int i,int j,int *p,int **m,int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> 0<span class="token punctuation">)</span>        <span class="token keyword">return</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        <span class="token keyword">return</span> 0<span class="token punctuation">;</span>    int u <span class="token operator">=</span> LookupChain<span class="token punctuation">(</span>i, i, p, m, s<span class="token punctuation">)</span> + LookupChain<span class="token punctuation">(</span>i + 1, j, p, m, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> i+1<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       int tmp <span class="token operator">=</span> LookupChain<span class="token punctuation">(</span>i, k, p, m, s<span class="token punctuation">)</span> + LookupChain<span class="token punctuation">(</span>k + 1, j, p, m, s<span class="token punctuation">)</span> + p<span class="token punctuation">[</span>i - 1<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> * p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> u<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            u <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>    <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token punctuation">}</span>int MatrixChain_LookUp<span class="token punctuation">(</span>int i, int j, int n, int *p, int **m, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int p <span class="token operator">=</span> 1<span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> p++<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int q <span class="token operator">=</span> 1<span class="token punctuation">;</span> q <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> q++<span class="token punctuation">)</span>            m<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>    <span class="token keyword">return</span> LookupChain<span class="token punctuation">(</span>i, j, p, m, s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="构造最优解算法"><a href="#构造最优解算法" class="headerlink" title="构造最优解算法"></a>构造最优解算法</h1><pre class=" language-bash"><code class="language-bash">/*****************************************构造最优解***********************************************************/void Traceback<span class="token punctuation">(</span>int i, int j, int **s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A"</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span><span class="token punctuation">;</span>        Traceback<span class="token punctuation">(</span>i, s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>, s<span class="token punctuation">)</span><span class="token punctuation">;</span>        Traceback<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> + 1, j, s<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><pre class=" language-bash"><code class="language-bash">int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int <span class="token keyword">select</span><span class="token punctuation">;</span>    int p<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>30,35,15,5,10,20,25<span class="token punctuation">}</span><span class="token punctuation">;</span>    int n <span class="token operator">=</span> sizeof<span class="token punctuation">(</span>p<span class="token punctuation">)</span> / sizeof<span class="token punctuation">(</span>*p<span class="token punctuation">)</span> - 1<span class="token punctuation">;</span>    int **m <span class="token operator">=</span> new int *<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    int **s <span class="token operator">=</span> new int *<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span>n + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    printf<span class="token punctuation">(</span><span class="token string">"*********动态规划算法*****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******1.动态规划算法******\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******2.递归算法*********\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"******3.备忘录算法*******\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"*******0.退出************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"请选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>select<span class="token operator">=</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span> /******************** 动态规划算法********************/    cout<span class="token operator">&lt;&lt;</span><span class="token string">"动态规划算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>         MatrixChain_Dynamic<span class="token punctuation">(</span>n, p, m, s<span class="token punctuation">)</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>5<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> if<span class="token punctuation">(</span>select<span class="token operator">=</span>2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        /******************** 递归算法求解 ********************/        cout<span class="token operator">&lt;&lt;</span><span class="token string">"递归算法求解"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> MatrixChain_Recursive<span class="token punctuation">(</span>1, n, p, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> MatrixChain_Recursive<span class="token punctuation">(</span>2, 5, p, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>select<span class="token operator">=</span>3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            /******************** 备忘录算法 ********************/            cout<span class="token operator">&lt;&lt;</span><span class="token string">"备忘录算法"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优值为："</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> MatrixChain_LookUp<span class="token punctuation">(</span>1, n, n, p, m, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> MatrixChain_LookUp<span class="token punctuation">(</span>2, 5, n, p, m, s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> if<span class="token punctuation">(</span>select<span class="token operator">=</span>0<span class="token punctuation">)</span><span class="token punctuation">{</span>            exit<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"最优解为："</span><span class="token punctuation">;</span>    Traceback<span class="token punctuation">(</span>1, n, s<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        delete<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">;</span>    delete<span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析（一）</title>
      <link href="/2020/06/01/suan-fa-she-ji-yu-fen-xi-yi/"/>
      <url>/2020/06/01/suan-fa-she-ji-yu-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>算法与设计学习过程<br>坚持更新（使用JAVA语言）</p></blockquote><h1 id="递归：实现汉诺塔问题"><a href="#递归：实现汉诺塔问题" class="headerlink" title="递归：实现汉诺塔问题"></a>递归：实现汉诺塔问题</h1><pre class=" language-bash"><code class="language-bash">public class Hannota <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int N <span class="token operator">=</span> 3<span class="token punctuation">;</span>        Hanoi<span class="token punctuation">(</span><span class="token string">'A'</span>, <span class="token string">'B'</span>, <span class="token string">'C'</span>, N<span class="token punctuation">)</span><span class="token punctuation">;</span>      //使用    <span class="token punctuation">}</span>    public static void Hanoi<span class="token punctuation">(</span>char from, char inter, char to, int  N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    //方法        <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> 1<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"移动 1 从 "</span>+ from + <span class="token string">" 到 "</span> + to<span class="token punctuation">)</span><span class="token punctuation">;</span>  //只有一个的情况下         <span class="token punctuation">}</span>else <span class="token punctuation">{</span>            Hanoi<span class="token punctuation">(</span> from, to, inter, N - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>             System.out.println<span class="token punctuation">(</span><span class="token string">"移动 "</span> + N + <span class="token string">" 从 "</span> + from + <span class="token string">" 到 "</span> + to<span class="token punctuation">)</span><span class="token punctuation">;</span>                     Hanoi<span class="token punctuation">(</span> inter, from, to, N - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h1 id="递归：实现排序问题"><a href="#递归：实现排序问题" class="headerlink" title="递归：实现排序问题"></a>递归：实现排序问题</h1><pre class=" language-bash"><code class="language-bash">public class Sort <span class="token punctuation">{</span>    public static int S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span class="token punctuation">;</span>    //定义一个数组s<span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        perm<span class="token punctuation">(</span>S,0,S.length-1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private static void swap<span class="token punctuation">(</span>int i1, int i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int temp <span class="token operator">=</span> S<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span>        S<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void perm<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span>, int begin,int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>end<span class="token operator">==</span>begin<span class="token punctuation">)</span><span class="token punctuation">{</span>            //一到递归的出口就输出数组，此数组为全排列            for<span class="token punctuation">(</span>int i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        else<span class="token punctuation">{</span>            for<span class="token punctuation">(</span>int j<span class="token operator">=</span>begin<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>                    swap<span class="token punctuation">(</span>begin,j<span class="token punctuation">)</span><span class="token punctuation">;</span>        //for循环将begin~end中的每个数放到begin位置中去                perm<span class="token punctuation">(</span>arr,begin+1,end<span class="token punctuation">)</span><span class="token punctuation">;</span>    //假设begin位置确定，那么对begin+1~end中的数继续递归     //递归                swap<span class="token punctuation">(</span>begin,j<span class="token punctuation">)</span><span class="token punctuation">;</span>        //换过去后再还原            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="分治：递归实现的快速排序"><a href="#分治：递归实现的快速排序" class="headerlink" title="分治：递归实现的快速排序"></a>分治：递归实现的快速排序</h1><pre class=" language-bash"><code class="language-bash">public class Quicksort <span class="token punctuation">{</span>    /**     * @param args     */    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span>7, 9, 2, 3, 6, 5, 4, 1, 8, 10<span class="token punctuation">}</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"原数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token keyword">:</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span><span class="token string">" "</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quickSort<span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"现数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token keyword">:</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span><span class="token string">" "</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * 对整个源数组进行快速排序     * @param src     * @return     */    public static void quickSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sortPartision<span class="token punctuation">(</span>src, 0, src.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 排序分治区域       * @param src     * @param start     * @param end     */    private static void sortPartision<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> src, int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int i <span class="token operator">=</span> start<span class="token punctuation">;</span>    //将开始赋值给i         int r <span class="token operator">=</span> end<span class="token punctuation">;</span>         //将结尾赋值给r        int x <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r--<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                i++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                src<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                r--<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        int I <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sortPartision<span class="token punctuation">(</span>src, start, I-1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sortPartision<span class="token punctuation">(</span>src, I+1, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="分治：递归实现的合并排序"><a href="#分治：递归实现的合并排序" class="headerlink" title="分治：递归实现的合并排序"></a>分治：递归实现的合并排序</h1><pre class=" language-bash"><code class="language-bash">public class Mergesort <span class="token punctuation">{</span>    static int arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>100, 20, 15, 30, 5, 75, 40, 12, 514<span class="token punctuation">}</span><span class="token punctuation">;</span>  //定义排序前的一个是数组    public static void main<span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"数据排序之前 ： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 排序前打印数组        printArray<span class="token punctuation">(</span>arr, 0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 用递归实现排序        mergeSort<span class="token punctuation">(</span>0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"-----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 排序后打印数组        System.out.println<span class="token punctuation">(</span><span class="token string">"排序后打印数组:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>arr, 0, arr.length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 用于合并排序的递归算法     *     * @param start     * @param end     */    public static void mergeSort<span class="token punctuation">(</span>int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int mid <span class="token operator">=</span> <span class="token punctuation">(</span>start + end<span class="token punctuation">)</span> / 2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            // 排序左半部分            mergeSort<span class="token punctuation">(</span>start, mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 排序右半部分            mergeSort<span class="token punctuation">(</span>mid + 1, end<span class="token punctuation">)</span><span class="token punctuation">;</span>            // 合并左右两半            merge<span class="token punctuation">(</span>start, mid, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * @param start     * @param mid     * @param end     */    private static void merge<span class="token punctuation">(</span>int start, int mid, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 初始化临时数组和索引        int<span class="token punctuation">[</span><span class="token punctuation">]</span> tempArray <span class="token operator">=</span> new int<span class="token punctuation">[</span>arr.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int tempArrayIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"合并前:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>arr, start, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        int startIndex <span class="token operator">=</span> start<span class="token punctuation">;</span>        int midIndex <span class="token operator">=</span> mid + 1<span class="token punctuation">;</span>        // 它将迭代直到较小的列表到达结尾        <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> midIndex <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>midIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>midIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        // 复制剩余的元素        <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>startIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>midIndex <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempArray<span class="token punctuation">[</span>tempArrayIndex++<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>midIndex++<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        // 排序后将tempArray复制到实际数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tempArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"合并后:   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printArray<span class="token punctuation">(</span>tempArray, start, end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 打印数组     *     * @param arr   传入的数组     * @param start 遍历开始的位置     * @param end   遍历结束的位置     */    public static void printArray<span class="token punctuation">(</span>int arr<span class="token punctuation">[</span><span class="token punctuation">]</span>, int start, int end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> + <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sandboxie破解</title>
      <link href="/2020/05/21/sandboxie-po-jie/"/>
      <url>/2020/05/21/sandboxie-po-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Sandboxie安装及破解<br>仅供学习使用,请支持正版！！！    </p></blockquote><h2 id="Sandboxie-安装及破解"><a href="#Sandboxie-安装及破解" class="headerlink" title="Sandboxie 安装及破解"></a><center><font size="+2"><code>Sandboxie 安装及破解</code></font></center></h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>   1.点击进入<a href="https://www.sandboxie.com/DownloadSandboxie" target="_blank" rel="noopener">下载界面</a></p><p>   2.点击如下图位置进行下载</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566457584/Blog/Sandboxie/Sandboxie1_qgzwni.png" alt="">  </p><p>   3.进入我的<a href="https://pan.baidu.com/s/1HRKs9rSNBD_3fg-zEx6hmA" target="_blank" rel="noopener">百度云</a>进行下<code>载驱动文件</code>以及<code>注册机</code>（选择合适驱动文件）</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566458554/Blog/Sandboxie/Sandboxie2_mpoyuj.png" alt=""> </p><h3 id="安装、破解"><a href="#安装、破解" class="headerlink" title="安装、破解"></a>安装、破解</h3><p>   1.点击安装包进行安装  </p><p>   2.语言随你喜好（可任选） </p><p>   3.选择合适的<code>安装位置</code>并记住（等会要用到） </p><p>   4.安装完后不要点击下一步，这时候找到我们的<code>安装目录</code>，将我们之前下载驱动文件放入根目录,直接进行<code>覆盖</code></p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566458772/Blog/Sandboxie/Sandboxie3_au8ogr.png" alt=""></p><p>   5.弄完上一步后把安装程序接着完成，然后以管理员运行我们之前下载的注册机 </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566459634/Blog/Sandboxie/Sandboxie4_hop6mc.png" alt=""> </p><p>   6.首先<code>指定</code>你的安装路径，然后<code>获取</code>你的安装版本，再<code>计算</code>机器码，输入你想要的<code>注册期限</code>,最后点击开始注册即可破解成功！！！  </p><p>   7.以下是我的配置（我现在的是最新版本，安装路径是我自定义的，最后注册期限为2099-08-22 相当于无限使用</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460053/Blog/Sandboxie/Sandboxie6_rmmbnb.png" alt=""> </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460102/Blog/Sandboxie/Sandboxie5_qrvtbo.png" alt=""> </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460054/Blog/Sandboxie/Sandboxie7_xy1qqo.png" alt=""> </p><p>   8.最后进入软件，帮助-&gt;关于 显示注册信息</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566460355/Blog/Sandboxie/Sandboxie8_fma0nx.png" alt=""> </p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
            <tag> Sandboxie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（一）</title>
      <link href="/2020/05/20/linux-xue-xi-yi/"/>
      <url>/2020/05/20/linux-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux学习过程<br>坚持更新  </p></blockquote><h1 id="Linux系统安装（vm虚拟机安装）"><a href="#Linux系统安装（vm虚拟机安装）" class="headerlink" title="Linux系统安装（vm虚拟机安装）"></a>Linux系统安装（vm虚拟机安装）</h1><h2 id="IOS镜像下载"><a href="#IOS镜像下载" class="headerlink" title="IOS镜像下载"></a>IOS镜像下载</h2><p>   1.<a href="https://www.linux.org/pages/download/" target="_blank" rel="noopener">官方网站</a>镜像下载（需要翻墙）<br>   2.<a href="https://linux.cn/share/distro/" target="_blank" rel="noopener">Linux中国</a>镜像下载（无需翻墙）<br>   3.或者自己找到镜像网站，进行下载  </p><h2 id="VM虚拟机下载"><a href="#VM虚拟机下载" class="headerlink" title="VM虚拟机下载"></a>VM虚拟机下载</h2><p>   1.<a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0" target="_blank" rel="noopener">vm15-官网</a>下载<br>   2.下载后自行安装  </p><h2 id="ISO镜像VM安装（此处以kaili-Linux为例）"><a href="#ISO镜像VM安装（此处以kaili-Linux为例）" class="headerlink" title="ISO镜像VM安装（此处以kaili Linux为例）"></a>ISO镜像VM安装（此处以kaili Linux为例）</h2><p>   1.创建新的虚拟机（个人一般选择自定义）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567515573/Blog/Linux/Linux%28%E4%B8%80%29/Linux1_sdts62.png" alt=""><br>   2.点击下一步<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567516398/Blog/Linux/Linux%28%E4%B8%80%29/Linux2_bkzuhm.png" alt=""><br>   3.没有检测到Linux（选择稍后安装）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux3_qutwnd.png" alt=""><br>   4.Kaili-Linux选择Deblan (选择你镜像的版本)<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux4_zwrgl3.png" alt=""><br>   5.选择存储位置和名称<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux5_xvcqof.png" alt=""><br>   6.选择适合你的配置<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux6_d8pzbn.png" alt=""><br>   7.根据自己电脑配置，自行选择<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux7_ft0k9y.png" alt=""><br>   8.自行选择（个人选择 桥接模式）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux8_hbf0rs.png" alt=""><br>   9.默认配置即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517856/Blog/Linux/Linux%28%E4%B8%80%29/Linux9_lbqpzv.png" alt=""><br>   10.默认配置即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux10_c7fyoa.png" alt=""><br>   11.创建新的虚拟磁盘即可<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux11_lf6clq.png" alt=""><br>   12.按需求设置<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567517857/Blog/Linux/Linux%28%E4%B8%80%29/Linux12_ceuwcw.png" alt=""><br>   13.配置完成，接下来开始安装  </p><h2 id="开始虚拟系统安装配置"><a href="#开始虚拟系统安装配置" class="headerlink" title="开始虚拟系统安装配置"></a>开始虚拟系统安装配置</h2><p>   1.选择Graphical install(图形安装)<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-1_sc1ki4.png" alt=""><br>   2.选择系统语言<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524301/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-2_htofwj.png" alt=""><br>   3.选择国家地区<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-3_qvdbzo.png" alt=""><br>   4.配置键盘<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-4_zie6qs.png" alt=""><br>   5.输入自己想要的主机名，也可以点击继续跳过<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-5_eyhe4m.png" alt=""><br>   6.配置域名（可跳过）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524302/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-6_xxjtnd.png" alt=""><br>   7.设置用户密码<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-7_hbwxr0.png" alt=""><br>   8.磁盘分区（新手推荐选择第一个）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-8_ybtypj.png" alt=""><br>   9.按步骤走<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524304/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-9_weeh6k.png" alt=""><br>   10.按步骤走（可以根据自己的喜好配置）<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-10_bnpav6.png" alt=""><br>   11.结束分区<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524340/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-11_e2jbrn.png" alt=""><br>   12.确定修改<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524339/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-12_pcftpa.png" alt=""><br>   13.<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524303/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-13_xsmumy.png" alt=""><br>   14.将GRUB安装至硬盘<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524307/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-14_yu1efo.png" alt=""><br>   15.默认设备<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524305/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-15._js0ce4.png" alt=""><br>   16.安装完成<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524306/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-16_p3idkv.png" alt=""><br>   17.用户名初始为root<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524305/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-17_vcpz2b.png" alt=""><br>   18.填入自己之前填的密码<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524306/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-18_er7alo.png" alt=""><br>   19.出现以下界面，则表明系统安装完成<br>     <img src="https://res.cloudinary.com/valent/image/upload/v1567524338/Blog/Linux/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%892/Linux-19_pujrrp.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JET-BRAINS 软件破解</title>
      <link href="/2020/05/19/intellij-ruan-jian-po-jie/"/>
      <url>/2020/05/19/intellij-ruan-jian-po-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JET-BRAINS 软件破解教程<br>仅供学习使用，请支持正版！！！  </p></blockquote><h1 id="JET-BRAINS软件永久破解（这里以IDEA为例子）"><a href="#JET-BRAINS软件永久破解（这里以IDEA为例子）" class="headerlink" title="JET-BRAINS软件永久破解（这里以IDEA为例子）"></a>JET-BRAINS软件永久破解（这里以<code>IDEA</code>为例子）</h1><h2 id="下载安装-2019-2-X版本"><a href="#下载安装-2019-2-X版本" class="headerlink" title="下载安装(2019 2.X版本)"></a>下载安装(2019 2.X版本)</h2><p>  1.进入<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">官网</a>进行下载IDEA最新版本 </p><p>  2.下载完成后按步骤安装即可  </p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>   1.进入我的<a href="https://pan.baidu.com/s/1UHxUZzOpaUqk5rx5xwpQ9w" target="_blank" rel="noopener">百度云</a>，下载<code>破解补丁</code></p><p>   2.将破解补丁放在一个没有中文的目录中 如：D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar  (这是我的存放目录)</p><p>   3.进入IDEA的bin目录 分别打开<code>idea.exe.vmoptions</code>、<code>idea64.exe.vmoptions</code>在最后面添加-javaagent:D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar（后面的路径为你保存破解补丁的位置）   </p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545071/Blog/JET-BRAINS/IDEA/IDEA_vhbtgw.png" alt=""></p><p>   4.添加完成后进入软件，选择使用<code>Evaluate for free</code></p><p>   5.选择 <code>Configure - Edit Custom VM Options</code>，在弹出的窗口确定末尾是刚刚修改的 -javaagent:-javaagent:D:--Code–\JET-BRAINS\JET\jetbrains-agent.jar （如果提示创建，选择是，在末尾再添加上面的参数）</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545701/Blog/JET-BRAINS/IDEA/IDEA1_rabkjs.png" alt="">  </p><p>   以下结果显示的，就是我刚刚添加的</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566545701/Blog/JET-BRAINS/IDEA/IDEA2_esnfvo.png" alt=""></p><p>   6.选择 <code>Manage License</code>， License Server 填写  <a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a>  点击Activate</p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566546375/Blog/JET-BRAINS/IDEA/IDEA3_yejepj.png" alt=""></p><p>   7.重启你的 IDEA ,看下是否已经<span id="post-red">破解成功</span></p><p>   <img src="https://res.cloudinary.com/valent/image/upload/v1566546535/Blog/JET-BRAINS/IDEA/IDEA4_e9tdo9.png" alt=""></p><p>   8.没有显示授权日期，也能正常使用，稳定奔现！！！</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>   1.如果第 6 步提示激活不了的朋友们，打开 Windows 的 hosts 文件，路径一般在 C:\Windows\System32\drivers\etc 下，在末尾加上</p><pre class=" language-bash"><code class="language-bash">0.0.0.0 account.jetbrains.com</code></pre><p>   然后保存再点击激活</p><p>   2.其它<code>JET-BRAINS软件</code>破解也是与IDEA破解步骤一样  </p><h1 id="JetBrains-系列软件汉化包"><a href="#JetBrains-系列软件汉化包" class="headerlink" title="JetBrains 系列软件汉化包"></a>JetBrains 系列软件汉化包</h1><p>   1.进入我的<a href="https://pan.baidu.com/s/1-AmIq6npwTY44wuTJ1v7lg" target="_blank" rel="noopener">百度云</a>下载JetBrains 系列软件汉化包  </p><p>   2.进入JetBrains 软件安装目录的<code>lib</code>目录 </p><p>   3.放入适合你版本的安装包，重启软件，即可汉化完成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JET-BRAINS </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
